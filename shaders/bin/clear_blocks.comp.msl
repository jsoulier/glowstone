#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    int2 Position;
};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], texture3d<uint, access::write> blocks [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _139;
        if (!(gl_GlobalInvocationID.x >= 32u))
        {
            _139 = gl_GlobalInvocationID.y >= 32u;
        }
        else
        {
            _139 = true;
        }
        bool _153;
        if (!_139)
        {
            _153 = gl_GlobalInvocationID.z >= 32u;
        }
        else
        {
            _153 = true;
        }
        if (_153)
        {
            break;
        }
        int3 _160 = int3(gl_GlobalInvocationID);
        int3 _174 = _160;
        _174.x = _160.x + (UniformBuffer.Position.x * 32);
        _174.z = _160.z + (UniformBuffer.Position.y * 32);
        blocks.write(uint4(0u), uint3(uint3(_174)));
        break;
    } while(false);
}

