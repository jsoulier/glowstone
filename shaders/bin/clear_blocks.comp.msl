#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    int2 Position;
};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], texture2d<uint> chunks [[texture(0)]], texture3d<uint, access::write> blocks [[texture(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _153;
        if (!(gl_GlobalInvocationID.x >= 32u))
        {
            _153 = gl_GlobalInvocationID.y >= 128u;
        }
        else
        {
            _153 = true;
        }
        bool _167;
        if (!_153)
        {
            _167 = gl_GlobalInvocationID.z >= 32u;
        }
        else
        {
            _167 = true;
        }
        if (_167)
        {
            break;
        }
        int3 _174 = int3(gl_GlobalInvocationID);
        uint2 _182 = uint2(UniformBuffer.Position);
        int3 _200 = _174;
        _200.x = int(uint(_174.x) + (chunks.read(uint2(_182), 0u).x * 32u));
        _200.z = int(uint(_174.z) + (chunks.read(uint2(_182), 0u).y * 32u));
        blocks.write(uint4(0u), uint3(uint3(_200)));
        break;
    } while(false);
}

