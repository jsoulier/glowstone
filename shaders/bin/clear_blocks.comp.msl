#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    int2 Position;
};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], texture3d<uint, access::write> blocks [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _147;
        if (!(gl_GlobalInvocationID.x >= 32u))
        {
            _147 = gl_GlobalInvocationID.y >= 64u;
        }
        else
        {
            _147 = true;
        }
        bool _161;
        if (!_147)
        {
            _161 = gl_GlobalInvocationID.z >= 32u;
        }
        else
        {
            _161 = true;
        }
        if (_161)
        {
            break;
        }
        int3 _168 = int3(gl_GlobalInvocationID);
        int3 _182 = _168;
        _182.x = _168.x + (UniformBuffer.Position.x * 32);
        _182.z = _168.z + (UniformBuffer.Position.y * 32);
        blocks.write(uint4(0u), uint3(uint3(_182)));
        break;
    } while(false);
}

