#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_StructuredBuffer_v2uint
{
    uint2 _m0[1];
};

constant uint3 _111 = {};

kernel void main0(constant uint* spvBufferSizeConstants [[buffer(25)]], const device type_StructuredBuffer_v2uint& jobs [[buffer(0)]], texture3d<uint, access::write> blocks [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    constant uint& jobsBufferSize = spvBufferSizeConstants[0];
    do
    {
        if (gl_GlobalInvocationID.x >= ((jobsBufferSize - 0) / 8))
        {
            break;
        }
        blocks.write(uint4((((device uint*)&jobs._m0[gl_GlobalInvocationID.x])[1] >> 16u) & 255u), uint3(uint3(((device uint*)&jobs._m0[gl_GlobalInvocationID.x])[0] & 65535u, (((device uint*)&jobs._m0[gl_GlobalInvocationID.x])[0] >> 16u) & 65535u, ((device uint*)&jobs._m0[gl_GlobalInvocationID.x])[1] & 65535u)));
        break;
    } while(false);
}

