#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

kernel void main0(const device type_StructuredBuffer_CameraState& cameraState [[buffer(0)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(1)]], texture3d<uint> blocks [[texture(0)]], texture2d<uint> chunks [[texture(1)]], texture2d<float, access::write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _338 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _340 = _338.x;
        uint _344 = _338.y;
        bool _366;
        if (!(gl_GlobalInvocationID.x >= _340))
        {
            _366 = gl_GlobalInvocationID.y >= _344;
        }
        else
        {
            _366 = true;
        }
        if (_366)
        {
            break;
        }
        float3 _441 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + 0.5)) / float(_340)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + 0.5)) / float(_344))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        float3 _320 = _441;
        float3 _321 = float3(cameraState._m0[0u].Position);
        int3 _322 = int3(floor(float3(cameraState._m0[0u].Position)));
        float3 _323 = abs(float3(1.0) / _441);
        int3 _324;
        float3 _325;
        for (int _474 = 0; _474 < 3; _474++)
        {
            uint _485 = uint(_474);
            if (_320[_485] < 0.0)
            {
                _324[_485] = -1;
                _325[_485] = (_321[_485] - float(_322[_485])) * _323[_485];
            }
            else
            {
                _324[_485] = 1;
                _325[_485] = ((float(_322[_485]) + 1.0) - _321[_485]) * _323[_485];
            }
        }
        uint _564;
        uint _844;
        int _560 = 0;
        uint _563 = 0u;
        for (;;)
        {
            if (_560 < 512)
            {
                int3 _574 = _322;
                int _586 = _574.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                int3 _588 = _574;
                _588.x = _586;
                int _600 = _574.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                _588.z = _600;
                int2 _608 = _588.xz / int2(32);
                bool _622;
                if (!(_586 < 0))
                {
                    _622 = _600 < 0;
                }
                else
                {
                    _622 = true;
                }
                bool _634;
                if (!_622)
                {
                    _634 = _608.x >= 8;
                }
                else
                {
                    _634 = true;
                }
                bool _646;
                if (!_634)
                {
                    _646 = _608.y >= 8;
                }
                else
                {
                    _646 = true;
                }
                if (_646)
                {
                    _844 = _563;
                    break;
                }
                int2 _673 = int2(chunks.read(uint2(uint2(_608)), 0u).xy);
                int3 _683 = _588;
                _683.x = (_586 - (_608.x * 32)) + (_673.x * 32);
                _683.z = (_600 - (_608.y * 32)) + (_673.y * 32);
                _564 = blocks.read(uint3(uint3(_683)), 0u).x;
                if (_564 != 0u)
                {
                    _844 = _564;
                    break;
                }
                if (_325.x < _325.y)
                {
                    if (_325.x < _325.z)
                    {
                        _325.x += _323.x;
                        _322.x += _324.x;
                    }
                    else
                    {
                        _325.z += _323.z;
                        _322.z += _324.z;
                    }
                }
                else
                {
                    if (_325.y < _325.z)
                    {
                        _325.y += _323.y;
                        _322.y += _324.y;
                    }
                    else
                    {
                        _325.z += _323.z;
                        _322.z += _324.z;
                    }
                }
                _560++;
                _563 = _564;
                continue;
            }
            else
            {
                _844 = _563;
                break;
            }
        }
        if (_844 != 0u)
        {
            float4 _326 = float4(0.0, 0.0, 0.0, 1.0);
            _326[uint(_322.y - 3 * (_322.y / 3))] = 1.0;
            outTexture.write(_326, uint2(gl_GlobalInvocationID.xy));
        }
        else
        {
            outTexture.write(float4(0.0), uint2(gl_GlobalInvocationID.xy));
        }
        break;
    } while(false);
}

