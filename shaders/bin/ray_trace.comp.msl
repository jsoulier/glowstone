#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float4 _335 = {};

kernel void main0(const device type_StructuredBuffer_CameraState& cameraState [[buffer(0)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(1)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(2)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _354 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _356 = _354.x;
        uint _360 = _354.y;
        bool _382;
        if (!(gl_GlobalInvocationID.x >= _356))
        {
            _382 = gl_GlobalInvocationID.y >= _360;
        }
        else
        {
            _382 = true;
        }
        if (_382)
        {
            break;
        }
        float3 _457 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + 0.5)) / float(_356)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + 0.5)) / float(_360))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        float3 _337 = _457;
        float3 _338 = float3(cameraState._m0[0u].Position);
        int3 _339 = int3(floor(float3(cameraState._m0[0u].Position)));
        float3 _340 = abs(float3(1.0) / _457);
        int3 _341;
        float3 _342;
        for (int _490 = 0; _490 < 3; _490++)
        {
            uint _501 = uint(_490);
            if (_337[_501] < 0.0)
            {
                _341[_501] = -1;
                _342[_501] = (_338[_501] - float(_339[_501])) * _340[_501];
            }
            else
            {
                _341[_501] = 1;
                _342[_501] = ((float(_339[_501]) + 1.0) - _338[_501]) * _340[_501];
            }
        }
        uint _580;
        uint _860;
        int _576 = 0;
        uint _579 = 0u;
        for (;;)
        {
            if (_576 < 512)
            {
                int3 _590 = _339;
                int _602 = _590.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                int3 _604 = _590;
                _604.x = _602;
                int _616 = _590.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                _604.z = _616;
                int2 _624 = _604.xz / int2(32);
                bool _638;
                if (!(_602 < 0))
                {
                    _638 = _616 < 0;
                }
                else
                {
                    _638 = true;
                }
                bool _650;
                if (!_638)
                {
                    _650 = _624.x >= 8;
                }
                else
                {
                    _650 = true;
                }
                bool _662;
                if (!_650)
                {
                    _662 = _624.y >= 8;
                }
                else
                {
                    _662 = true;
                }
                if (_662)
                {
                    _860 = _579;
                    break;
                }
                int2 _689 = int2(chunkTexture.read(uint2(uint2(_624)), 0u).xy);
                int3 _699 = _604;
                _699.x = (_602 - (_624.x * 32)) + (_689.x * 32);
                _699.z = (_616 - (_624.y * 32)) + (_689.y * 32);
                _580 = blockTexture.read(uint3(uint3(_699)), 0u).x;
                if (_580 != 0u)
                {
                    _860 = _580;
                    break;
                }
                if (_342.x < _342.y)
                {
                    if (_342.x < _342.z)
                    {
                        _342.x += _340.x;
                        _339.x += _341.x;
                    }
                    else
                    {
                        _342.z += _340.z;
                        _339.z += _341.z;
                    }
                }
                else
                {
                    if (_342.y < _342.z)
                    {
                        _342.y += _340.y;
                        _339.y += _341.y;
                    }
                    else
                    {
                        _342.z += _340.z;
                        _339.z += _341.z;
                    }
                }
                _576++;
                _579 = _580;
                continue;
            }
            else
            {
                _860 = _579;
                break;
            }
        }
        outTexture.write(float4(float((blockState._m0[_860].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_860].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_860].Color >> 8u) & 255u) * 0.0039215688593685626983642578125, float(blockState._m0[_860].Color & 255u) * 0.0039215688593685626983642578125), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

