#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

kernel void main0(const device type_StructuredBuffer_CameraState& cameraState [[buffer(0)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(1)]], texture3d<uint> blocks [[texture(0)]], texture2d<uint> chunks [[texture(1)]], texture2d<float, access::write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _337 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _339 = _337.x;
        uint _343 = _337.y;
        bool _365;
        if (!(gl_GlobalInvocationID.x >= _339))
        {
            _365 = gl_GlobalInvocationID.y >= _343;
        }
        else
        {
            _365 = true;
        }
        if (_365)
        {
            break;
        }
        float3 _440 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + 0.5)) / float(_339)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + 0.5)) / float(_343))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        float3 _319 = _440;
        float3 _320 = float3(cameraState._m0[0u].Position);
        int3 _321 = int3(floor(float3(cameraState._m0[0u].Position)));
        float3 _322 = abs(float3(1.0) / _440);
        int3 _323;
        float3 _324;
        for (int _473 = 0; _473 < 3; _473++)
        {
            uint _484 = uint(_473);
            if (_319[_484] < 0.0)
            {
                _323[_484] = -1;
                _324[_484] = (_320[_484] - float(_321[_484])) * _322[_484];
            }
            else
            {
                _323[_484] = 1;
                _324[_484] = ((float(_321[_484]) + 1.0) - _320[_484]) * _322[_484];
            }
        }
        uint _563;
        uint _843;
        int _559 = 0;
        uint _562 = 0u;
        for (;;)
        {
            if (_559 < 512)
            {
                int3 _573 = _321;
                int _585 = _573.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                int3 _587 = _573;
                _587.x = _585;
                int _599 = _573.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                _587.z = _599;
                int2 _607 = _587.xz / int2(32);
                bool _621;
                if (!(_585 < 0))
                {
                    _621 = _599 < 0;
                }
                else
                {
                    _621 = true;
                }
                bool _633;
                if (!_621)
                {
                    _633 = _607.x >= 10;
                }
                else
                {
                    _633 = true;
                }
                bool _645;
                if (!_633)
                {
                    _645 = _607.y >= 10;
                }
                else
                {
                    _645 = true;
                }
                if (_645)
                {
                    _843 = _562;
                    break;
                }
                int2 _672 = int2(chunks.read(uint2(uint2(_607)), 0u).xy);
                int3 _682 = _587;
                _682.x = (_585 - (_607.x * 32)) + (_672.x * 32);
                _682.z = (_599 - (_607.y * 32)) + (_672.y * 32);
                _563 = blocks.read(uint3(uint3(_682)), 0u).x;
                if (_563 != 0u)
                {
                    _843 = _563;
                    break;
                }
                if (_324.x < _324.y)
                {
                    if (_324.x < _324.z)
                    {
                        _324.x += _322.x;
                        _321.x += _323.x;
                    }
                    else
                    {
                        _324.z += _322.z;
                        _321.z += _323.z;
                    }
                }
                else
                {
                    if (_324.y < _324.z)
                    {
                        _324.y += _322.y;
                        _321.y += _323.y;
                    }
                    else
                    {
                        _324.z += _322.z;
                        _321.z += _323.z;
                    }
                }
                _559++;
                _562 = _563;
                continue;
            }
            else
            {
                _843 = _562;
                break;
            }
        }
        if (_843 != 0u)
        {
            float4 _325 = float4(0.0, 0.0, 0.0, 1.0);
            _325[uint(_321.y - 3 * (_321.y / 3))] = 1.0;
            outTexture.write(_325, uint2(gl_GlobalInvocationID.xy));
        }
        else
        {
            outTexture.write(float4(0.0), uint2(gl_GlobalInvocationID.xy));
        }
        break;
    } while(false);
}

