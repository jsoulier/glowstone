#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

kernel void main0(const device type_StructuredBuffer_CameraState& cameraState [[buffer(0)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(1)]], texture3d<uint> blocks [[texture(0)]], texture2d<uint> chunks [[texture(1)]], texture2d<float, access::write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _336 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _338 = _336.x;
        uint _342 = _336.y;
        bool _364;
        if (!(gl_GlobalInvocationID.x >= _338))
        {
            _364 = gl_GlobalInvocationID.y >= _342;
        }
        else
        {
            _364 = true;
        }
        if (_364)
        {
            break;
        }
        float3 _439 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + 0.5)) / float(_338)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + 0.5)) / float(_342))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        float3 _318 = _439;
        float3 _319 = float3(cameraState._m0[0u].Position);
        int3 _320 = int3(floor(float3(cameraState._m0[0u].Position)));
        float3 _321 = abs(float3(1.0) / _439);
        int3 _322;
        float3 _323;
        for (int _472 = 0; _472 < 3; _472++)
        {
            uint _483 = uint(_472);
            if (_318[_483] < 0.0)
            {
                _322[_483] = -1;
                _323[_483] = (_319[_483] - float(_320[_483])) * _321[_483];
            }
            else
            {
                _322[_483] = 1;
                _323[_483] = ((float(_320[_483]) + 1.0) - _319[_483]) * _321[_483];
            }
        }
        uint _562;
        uint _842;
        int _558 = 0;
        uint _561 = 0u;
        for (;;)
        {
            if (_558 < 512)
            {
                int3 _572 = _320;
                int _584 = _572.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                int3 _586 = _572;
                _586.x = _584;
                int _598 = _572.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                _586.z = _598;
                int2 _606 = _586.xz / int2(32);
                int _610 = _606.x;
                bool _624;
                if (!(_610 < 0))
                {
                    _624 = _606.y < 0;
                }
                else
                {
                    _624 = true;
                }
                bool _634;
                if (!_624)
                {
                    _634 = _610 >= 4;
                }
                else
                {
                    _634 = true;
                }
                bool _646;
                if (!_634)
                {
                    _646 = _606.y >= 4;
                }
                else
                {
                    _646 = true;
                }
                if (_646)
                {
                    _842 = _561;
                    break;
                }
                int2 _671 = int2(chunks.read(uint2(uint2(_606)), 0u).xy);
                int3 _681 = _586;
                _681.x = (_584 - (_610 * 32)) + (_671.x * 32);
                _681.z = (_598 - (_606.y * 32)) + (_671.y * 32);
                _562 = blocks.read(uint3(uint3(_681)), 0u).x;
                if (_562 != 0u)
                {
                    _842 = _562;
                    break;
                }
                if (_323.x < _323.y)
                {
                    if (_323.x < _323.z)
                    {
                        _323.x += _321.x;
                        _320.x += _322.x;
                    }
                    else
                    {
                        _323.z += _321.z;
                        _320.z += _322.z;
                    }
                }
                else
                {
                    if (_323.y < _323.z)
                    {
                        _323.y += _321.y;
                        _320.y += _322.y;
                    }
                    else
                    {
                        _323.z += _321.z;
                        _320.z += _322.z;
                    }
                }
                _558++;
                _561 = _562;
                continue;
            }
            else
            {
                _842 = _561;
                break;
            }
        }
        if (_842 != 0u)
        {
            float4 _324 = float4(0.0, 0.0, 0.0, 1.0);
            _324[uint(_320.y - 3 * (_320.y / 3))] = 1.0;
            outTexture.write(_324, uint2(gl_GlobalInvocationID.xy));
        }
        else
        {
            outTexture.write(float4(0.0), uint2(gl_GlobalInvocationID.xy));
        }
        break;
    } while(false);
}

