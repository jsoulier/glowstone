#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
    float IOR;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _588 = {};
constant uint _589 = {};
constant bool _590 = {};
constant float3 _594 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _617 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _619 = _617.x;
        uint _623 = _617.y;
        bool _645;
        if (!(gl_GlobalInvocationID.x >= _619))
        {
            _645 = gl_GlobalInvocationID.y >= _623;
        }
        else
        {
            _645 = true;
        }
        if (_645)
        {
            break;
        }
        float _656 = float(UniformBuffer.Sample);
        float _662 = float(gl_GlobalInvocationID.x);
        float _664 = float(gl_GlobalInvocationID.y);
        uint4 _670 = as_type<uint4>(float4(_662, _664, _656, 0.0));
        uint _676 = _670.y;
        uint _682 = _676 + (_676 << 10u);
        uint _688 = _682 ^ (_682 >> 6u);
        uint _694 = _688 + (_688 << 3u);
        uint _700 = _694 ^ (_694 >> 11u);
        uint _712 = _670.z;
        uint _718 = _712 + (_712 << 10u);
        uint _724 = _718 ^ (_718 >> 6u);
        uint _730 = _724 + (_724 << 3u);
        uint _736 = _730 ^ (_730 >> 11u);
        uint _748 = _670.w;
        uint _754 = _748 + (_748 << 10u);
        uint _760 = _754 ^ (_754 >> 6u);
        uint _766 = _760 + (_760 << 3u);
        uint _772 = _766 ^ (_766 >> 11u);
        uint _782 = ((_670.x ^ (_700 + (_700 << 15u))) ^ (_736 + (_736 << 15u))) ^ (_772 + (_772 << 15u));
        uint _788 = _782 + (_782 << 10u);
        uint _794 = _788 ^ (_788 >> 6u);
        uint _800 = _794 + (_794 << 3u);
        uint _806 = _800 ^ (_800 >> 11u);
        uint4 _842 = as_type<uint4>(float4(_662, _664, _656, 1.0));
        uint _848 = _842.y;
        uint _854 = _848 + (_848 << 10u);
        uint _860 = _854 ^ (_854 >> 6u);
        uint _866 = _860 + (_860 << 3u);
        uint _872 = _866 ^ (_866 >> 11u);
        uint _884 = _842.z;
        uint _890 = _884 + (_884 << 10u);
        uint _896 = _890 ^ (_890 >> 6u);
        uint _902 = _896 + (_896 << 3u);
        uint _908 = _902 ^ (_902 >> 11u);
        uint _920 = _842.w;
        uint _926 = _920 + (_920 << 10u);
        uint _932 = _926 ^ (_926 >> 6u);
        uint _938 = _932 + (_932 << 3u);
        uint _944 = _938 ^ (_938 >> 11u);
        uint _954 = ((_842.x ^ (_872 + (_872 << 15u))) ^ (_908 + (_908 << 15u))) ^ (_944 + (_944 << 15u));
        uint _960 = _954 + (_954 << 10u);
        uint _966 = _960 ^ (_960 >> 6u);
        uint _972 = _966 + (_966 << 3u);
        uint _978 = _972 ^ (_972 >> 11u);
        float3 _1093;
        float3 _1096;
        float3 _1098;
        float3 _1100;
        float3 _1106;
        float3 _1108;
        float3 _1112;
        float3 _1114;
        _1093 = _594;
        _1096 = _594;
        _1098 = float3(0.0);
        _1100 = float3(1.0);
        _1106 = _588;
        _1108 = _588;
        _1112 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (as_type<float>(((_806 + (_806 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_619)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (as_type<float>(((_978 + (_978 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_623))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _1114 = float3(cameraState._m0[0u].Position);
        float3 _1097;
        float _1111;
        float3 _1115;
        int3 _599;
        float3 _600;
        float3 _1094;
        float3 _1099;
        float3 _1101;
        bool _1103;
        uint _1105;
        float3 _1107;
        float3 _1109;
        float3 _1113;
        float3 _2310;
        bool _1102;
        uint _1104;
        float _1110 = -1.0;
        int _1116 = 0;
        for (;;)
        {
            if (_1116 < 8)
            {
                float3 _601 = _1114;
                float3 _602 = _1112;
                do
                {
                    int3 _597 = int3(floor(_1114));
                    float3 _598 = abs(float3(1.0) / _1112);
                    for (int _1170 = 0; _1170 < 3; _1170++)
                    {
                        uint _1181 = uint(_1170);
                        if (_602[_1181] < 0.0)
                        {
                            _599[_1181] = -1;
                            _600[_1181] = (_601[_1181] - float(_597[_1181])) * _598[_1181];
                        }
                        else
                        {
                            _599[_1181] = 1;
                            _600[_1181] = ((float(_597[_1181]) + 1.0) - _601[_1181]) * _598[_1181];
                        }
                    }
                    int _1258;
                    bool _1754;
                    uint _1755;
                    float3 _1756;
                    float3 _1757;
                    bool _1758;
                    int _1254 = 0;
                    int _1257 = -1;
                    for (;;)
                    {
                        if (_1254 < 512)
                        {
                            int3 _1268 = _597;
                            int _1280 = _1268.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _1282 = _1268;
                            _1282.x = _1280;
                            int _1294 = _1268.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _1282.z = _1294;
                            int2 _1302 = _1282.xz / int2(32);
                            bool _1316;
                            if (!(_1280 < 0))
                            {
                                _1316 = _1294 < 0;
                            }
                            else
                            {
                                _1316 = true;
                            }
                            bool _1328;
                            if (!_1316)
                            {
                                _1328 = _1302.x >= 8;
                            }
                            else
                            {
                                _1328 = true;
                            }
                            bool _1340;
                            if (!_1328)
                            {
                                _1340 = _1302.y >= 8;
                            }
                            else
                            {
                                _1340 = true;
                            }
                            bool _1364;
                            if (!_1340)
                            {
                                bool _1362;
                                if (_599.y > 0)
                                {
                                    _1362 = _1268.y > 32;
                                }
                                else
                                {
                                    _1362 = false;
                                }
                                _1364 = _1362;
                            }
                            else
                            {
                                _1364 = true;
                            }
                            if (_1364)
                            {
                                _1754 = _1102;
                                _1755 = _1104;
                                _1756 = _1106;
                                _1757 = _1108;
                                _1758 = false;
                                break;
                            }
                            int2 _1391 = int2(chunkTexture.read(uint2(uint2(_1302)), 0u).xy);
                            int3 _1401 = _1282;
                            _1401.x = (_1280 - (_1302.x * 32)) + (_1391.x * 32);
                            _1401.z = (_1294 - (_1302.y * 32)) + (_1391.y * 32);
                            uint4 _1419 = blockTexture.read(uint3(uint3(_1401)), 0u);
                            uint _1421 = _1419.x;
                            bool _1445 = blockState._m0[_1421].IOR > 0.001000000047497451305389404296875;
                            bool _1469;
                            if (!_1445)
                            {
                                _1469 = !(_1421 == 0u);
                            }
                            else
                            {
                                _1469 = false;
                            }
                            bool _1478;
                            if (!_1469)
                            {
                                _1478 = _1445 ? (abs(blockState._m0[_1421].IOR - _1110) > 0.001000000047497451305389404296875) : false;
                            }
                            else
                            {
                                _1478 = true;
                            }
                            if (_1478)
                            {
                                float3 _1592;
                                float _1593;
                                if (_1257 == 0)
                                {
                                    float3 _1503 = float3(0.0);
                                    _1503.x = float(-_599.x);
                                    _1592 = _1503;
                                    _1593 = _600.x - _598.x;
                                }
                                else
                                {
                                    float3 _1587;
                                    float _1588;
                                    if (_1257 == 1)
                                    {
                                        float3 _1535 = float3(0.0);
                                        _1535.y = float(-_599.y);
                                        _1587 = _1535;
                                        _1588 = _600.y - _598.y;
                                    }
                                    else
                                    {
                                        float3 _1582;
                                        float _1583;
                                        if (_1257 == 2)
                                        {
                                            float3 _1566 = float3(0.0);
                                            _1566.z = float(-_599.z);
                                            _1582 = _1566;
                                            _1583 = _600.z - _598.z;
                                        }
                                        else
                                        {
                                            _1582 = float3(0.0);
                                            _1583 = 0.0;
                                        }
                                        _1587 = _1582;
                                        _1588 = _1583;
                                    }
                                    _1592 = _1587;
                                    _1593 = _1588;
                                }
                                _1754 = true;
                                _1755 = _1421;
                                _1756 = _1114 + (_1112 * _1593);
                                _1757 = _1592;
                                _1758 = true;
                                break;
                            }
                            if (_600.x < _600.y)
                            {
                                float _1625 = _600.x;
                                float _1629 = _600.z;
                                bool _1631 = _1625 < _1629;
                                if (_1631)
                                {
                                    _600.x += _598.x;
                                    _597.x += _599.x;
                                }
                                else
                                {
                                    _600.z += _598.z;
                                    _597.z += _599.z;
                                }
                                _1258 = _1631 ? 0 : 2;
                            }
                            else
                            {
                                float _1687 = _600.y;
                                float _1691 = _600.z;
                                bool _1693 = _1687 < _1691;
                                if (_1693)
                                {
                                    _600.y += _598.y;
                                    _597.y += _599.y;
                                }
                                else
                                {
                                    _600.z += _598.z;
                                    _597.z += _599.z;
                                }
                                _1258 = _1693 ? 1 : 2;
                            }
                            _1254++;
                            _1257 = _1258;
                            continue;
                        }
                        else
                        {
                            _1754 = _1102;
                            _1755 = _1104;
                            _1756 = _1106;
                            _1757 = _1108;
                            _1758 = false;
                            break;
                        }
                    }
                    if (_1758)
                    {
                        _1103 = _1754;
                        _1105 = _1755;
                        _1107 = _1756;
                        _1109 = _1757;
                        break;
                    }
                    _1103 = false;
                    _1105 = _589;
                    _1107 = _588;
                    _1109 = _588;
                    break;
                } while(false);
                if (!_1103)
                {
                    _2310 = _1098 + (_1100 * float3(0.5, 0.699999988079071044921875, 1.0));
                    break;
                }
                _1111 = blockState._m0[_1105].IOR;
                _1097 = float3(float((blockState._m0[_1105].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1105].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1105].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _1115 = _1107 + (_1109 * 0.001000000047497451305389404296875);
                if (_1111 > 0.001000000047497451305389404296875)
                {
                    _1094 = _1093;
                    _1099 = _1098;
                    _1101 = _1100;
                    _1113 = reflect(_1112, _1109);
                }
                else
                {
                    float2 _1871 = float2(gl_GlobalInvocationID.xy);
                    float _1883 = float(uint(UniformBuffer.Sample));
                    float _1887 = float(uint(_1116));
                    float _1889 = _1871.x;
                    uint4 _1897 = as_type<uint4>(float4(_1889, _1871.y, _1883 * 1337.0, _1887));
                    uint _1903 = _1897.y;
                    uint _1909 = _1903 + (_1903 << 10u);
                    uint _1915 = _1909 ^ (_1909 >> 6u);
                    uint _1921 = _1915 + (_1915 << 3u);
                    uint _1927 = _1921 ^ (_1921 >> 11u);
                    uint _1939 = _1897.z;
                    uint _1945 = _1939 + (_1939 << 10u);
                    uint _1951 = _1945 ^ (_1945 >> 6u);
                    uint _1957 = _1951 + (_1951 << 3u);
                    uint _1963 = _1957 ^ (_1957 >> 11u);
                    uint _1975 = _1897.w;
                    uint _1981 = _1975 + (_1975 << 10u);
                    uint _1987 = _1981 ^ (_1981 >> 6u);
                    uint _1993 = _1987 + (_1987 << 3u);
                    uint _1999 = _1993 ^ (_1993 >> 11u);
                    uint _2009 = ((_1897.x ^ (_1927 + (_1927 << 15u))) ^ (_1963 + (_1963 << 15u))) ^ (_1999 + (_1999 << 15u));
                    uint _2015 = _2009 + (_2009 << 10u);
                    uint _2021 = _2015 ^ (_2015 >> 6u);
                    uint _2027 = _2021 + (_2021 << 3u);
                    uint _2033 = _2027 ^ (_2027 >> 11u);
                    float _2053 = as_type<float>(((_2033 + (_2033 << 15u)) & 8388607u) | 1065353216u);
                    uint4 _2067 = as_type<uint4>(float4(_1889, _1871.y, _1883, _1887 * 19.0));
                    uint _2073 = _2067.y;
                    uint _2079 = _2073 + (_2073 << 10u);
                    uint _2085 = _2079 ^ (_2079 >> 6u);
                    uint _2091 = _2085 + (_2085 << 3u);
                    uint _2097 = _2091 ^ (_2091 >> 11u);
                    uint _2109 = _2067.z;
                    uint _2115 = _2109 + (_2109 << 10u);
                    uint _2121 = _2115 ^ (_2115 >> 6u);
                    uint _2127 = _2121 + (_2121 << 3u);
                    uint _2133 = _2127 ^ (_2127 >> 11u);
                    uint _2145 = _2067.w;
                    uint _2151 = _2145 + (_2145 << 10u);
                    uint _2157 = _2151 ^ (_2151 >> 6u);
                    uint _2163 = _2157 + (_2157 << 3u);
                    uint _2169 = _2163 ^ (_2163 >> 11u);
                    uint _2179 = ((_2067.x ^ (_2097 + (_2097 << 15u))) ^ (_2133 + (_2133 << 15u))) ^ (_2169 + (_2169 << 15u));
                    uint _2185 = _2179 + (_2179 << 10u);
                    uint _2191 = _2185 ^ (_2185 >> 6u);
                    uint _2197 = _2191 + (_2191 << 3u);
                    uint _2203 = _2197 ^ (_2197 >> 11u);
                    float _2235 = acos(sqrt(2.0 - _2053));
                    float _2239 = 6.283185482025146484375 * (as_type<float>(((_2203 + (_2203 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                    float _2243 = sin(_2235);
                    float _2247 = _2243 * cos(_2239);
                    float _2249 = cos(_2235);
                    float _2253 = _2243 * sin(_2239);
                    float3 _2270 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_1109.y) < 0.999000012874603271484375)), _1109));
                    _1094 = float3(_2247, _2249, _2253);
                    _1099 = _1098 + (_1100 * (_1097 * blockState._m0[_1105].Light));
                    _1101 = _1100 * _1097;
                    _1113 = fast::normalize(mix(reflect(_1112, _1109), ((_2270 * _2247) + (_1109 * _2249)) + (cross(_1109, _2270) * _2253), float3(blockState._m0[_1105].Roughness)));
                }
                _1093 = _1094;
                _1096 = _1097;
                _1098 = _1099;
                _1100 = _1101;
                _1102 = _1103;
                _1104 = _1105;
                _1106 = _1107;
                _1108 = _1109;
                _1110 = _1111;
                _1112 = _1113;
                _1114 = _1115;
                _1116++;
                continue;
            }
            else
            {
                _2310 = _1098;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_2310, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

