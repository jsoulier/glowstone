#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _558 = {};
constant uint _559 = {};
constant bool _560 = {};
constant float3 _564 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _586 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _588 = _586.x;
        uint _592 = _586.y;
        bool _614;
        if (!(gl_GlobalInvocationID.x >= _588))
        {
            _614 = gl_GlobalInvocationID.y >= _592;
        }
        else
        {
            _614 = true;
        }
        if (_614)
        {
            break;
        }
        float _625 = float(UniformBuffer.Sample);
        float _631 = float(gl_GlobalInvocationID.x);
        float _633 = float(gl_GlobalInvocationID.y);
        uint4 _639 = as_type<uint4>(float4(_631, _633, _625, 0.0));
        uint _645 = _639.y;
        uint _651 = _645 + (_645 << 10u);
        uint _657 = _651 ^ (_651 >> 6u);
        uint _663 = _657 + (_657 << 3u);
        uint _669 = _663 ^ (_663 >> 11u);
        uint _681 = _639.z;
        uint _687 = _681 + (_681 << 10u);
        uint _693 = _687 ^ (_687 >> 6u);
        uint _699 = _693 + (_693 << 3u);
        uint _705 = _699 ^ (_699 >> 11u);
        uint _717 = _639.w;
        uint _723 = _717 + (_717 << 10u);
        uint _729 = _723 ^ (_723 >> 6u);
        uint _735 = _729 + (_729 << 3u);
        uint _741 = _735 ^ (_735 >> 11u);
        uint _751 = ((_639.x ^ (_669 + (_669 << 15u))) ^ (_705 + (_705 << 15u))) ^ (_741 + (_741 << 15u));
        uint _757 = _751 + (_751 << 10u);
        uint _763 = _757 ^ (_757 >> 6u);
        uint _769 = _763 + (_763 << 3u);
        uint _775 = _769 ^ (_769 >> 11u);
        uint4 _811 = as_type<uint4>(float4(_631, _633, _625, 1.0));
        uint _817 = _811.y;
        uint _823 = _817 + (_817 << 10u);
        uint _829 = _823 ^ (_823 >> 6u);
        uint _835 = _829 + (_829 << 3u);
        uint _841 = _835 ^ (_835 >> 11u);
        uint _853 = _811.z;
        uint _859 = _853 + (_853 << 10u);
        uint _865 = _859 ^ (_859 >> 6u);
        uint _871 = _865 + (_865 << 3u);
        uint _877 = _871 ^ (_871 >> 11u);
        uint _889 = _811.w;
        uint _895 = _889 + (_889 << 10u);
        uint _901 = _895 ^ (_895 >> 6u);
        uint _907 = _901 + (_901 << 3u);
        uint _913 = _907 ^ (_907 >> 11u);
        uint _923 = ((_811.x ^ (_841 + (_841 << 15u))) ^ (_877 + (_877 << 15u))) ^ (_913 + (_913 << 15u));
        uint _929 = _923 + (_923 << 10u);
        uint _935 = _929 ^ (_929 >> 6u);
        uint _941 = _935 + (_935 << 3u);
        uint _947 = _941 ^ (_941 >> 11u);
        float3 _1060;
        float3 _1063;
        float3 _1065;
        float3 _1067;
        float3 _1073;
        float3 _1075;
        float3 _1077;
        float3 _1079;
        _1060 = _564;
        _1063 = _564;
        _1065 = float3(0.0);
        _1067 = float3(1.0);
        _1073 = _558;
        _1075 = _558;
        _1077 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (as_type<float>(((_775 + (_775 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_588)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (as_type<float>(((_947 + (_947 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_592))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _1079 = float3(cameraState._m0[0u].Position);
        float3 _1061;
        float3 _1064;
        float3 _1066;
        float3 _1068;
        float3 _1078;
        float3 _1080;
        int3 _569;
        float3 _570;
        bool _1070;
        uint _1072;
        float3 _1074;
        float3 _1076;
        float3 _2190;
        bool _1069;
        uint _1071;
        int _1081 = 0;
        for (;;)
        {
            if (_1081 < 16)
            {
                float3 _571 = _1079;
                float3 _572 = _1077;
                do
                {
                    int3 _567 = int3(floor(_1079));
                    float3 _568 = abs(float3(1.0) / _1077);
                    for (int _1132 = 0; _1132 < 3; _1132++)
                    {
                        uint _1143 = uint(_1132);
                        if (_572[_1143] < 0.0)
                        {
                            _569[_1143] = -1;
                            _570[_1143] = (_571[_1143] - float(_567[_1143])) * _568[_1143];
                        }
                        else
                        {
                            _569[_1143] = 1;
                            _570[_1143] = ((float(_567[_1143]) + 1.0) - _571[_1143]) * _568[_1143];
                        }
                    }
                    int _1220;
                    bool _1663;
                    uint _1664;
                    float3 _1665;
                    float3 _1666;
                    bool _1667;
                    int _1216 = 0;
                    int _1219 = -1;
                    for (;;)
                    {
                        if (_1216 < 512)
                        {
                            int3 _1230 = _567;
                            int _1242 = _1230.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _1244 = _1230;
                            _1244.x = _1242;
                            int _1256 = _1230.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _1244.z = _1256;
                            int2 _1264 = _1244.xz / int2(32);
                            bool _1278;
                            if (!(_1242 < 0))
                            {
                                _1278 = _1256 < 0;
                            }
                            else
                            {
                                _1278 = true;
                            }
                            bool _1290;
                            if (!_1278)
                            {
                                _1290 = _1264.x >= 8;
                            }
                            else
                            {
                                _1290 = true;
                            }
                            bool _1302;
                            if (!_1290)
                            {
                                _1302 = _1264.y >= 8;
                            }
                            else
                            {
                                _1302 = true;
                            }
                            bool _1326;
                            if (!_1302)
                            {
                                bool _1324;
                                if (_569.y > 0)
                                {
                                    _1324 = _1230.y > 32;
                                }
                                else
                                {
                                    _1324 = false;
                                }
                                _1326 = _1324;
                            }
                            else
                            {
                                _1326 = true;
                            }
                            if (_1326)
                            {
                                _1663 = _1069;
                                _1664 = _1071;
                                _1665 = _1073;
                                _1666 = _1075;
                                _1667 = false;
                                break;
                            }
                            int2 _1353 = int2(chunkTexture.read(uint2(uint2(_1264)), 0u).xy);
                            int3 _1363 = _1244;
                            _1363.x = (_1242 - (_1264.x * 32)) + (_1353.x * 32);
                            _1363.z = (_1256 - (_1264.y * 32)) + (_1353.y * 32);
                            uint4 _1381 = blockTexture.read(uint3(uint3(_1363)), 0u);
                            uint _1383 = _1381.x;
                            if (_1383 != 0u)
                            {
                                float3 _1501;
                                float _1502;
                                if (_1219 == 0)
                                {
                                    float3 _1412 = float3(0.0);
                                    _1412.x = float(-_569.x);
                                    _1501 = _1412;
                                    _1502 = _570.x - _568.x;
                                }
                                else
                                {
                                    float3 _1496;
                                    float _1497;
                                    if (_1219 == 1)
                                    {
                                        float3 _1444 = float3(0.0);
                                        _1444.y = float(-_569.y);
                                        _1496 = _1444;
                                        _1497 = _570.y - _568.y;
                                    }
                                    else
                                    {
                                        float3 _1491;
                                        float _1492;
                                        if (_1219 == 2)
                                        {
                                            float3 _1475 = float3(0.0);
                                            _1475.z = float(-_569.z);
                                            _1491 = _1475;
                                            _1492 = _570.z - _568.z;
                                        }
                                        else
                                        {
                                            _1491 = float3(0.0);
                                            _1492 = 0.0;
                                        }
                                        _1496 = _1491;
                                        _1497 = _1492;
                                    }
                                    _1501 = _1496;
                                    _1502 = _1497;
                                }
                                _1663 = true;
                                _1664 = _1383;
                                _1665 = _1079 + (_1077 * _1502);
                                _1666 = _1501;
                                _1667 = true;
                                break;
                            }
                            if (_570.x < _570.y)
                            {
                                float _1534 = _570.x;
                                float _1538 = _570.z;
                                bool _1540 = _1534 < _1538;
                                if (_1540)
                                {
                                    _570.x += _568.x;
                                    _567.x += _569.x;
                                }
                                else
                                {
                                    _570.z += _568.z;
                                    _567.z += _569.z;
                                }
                                _1220 = _1540 ? 0 : 2;
                            }
                            else
                            {
                                float _1596 = _570.y;
                                float _1600 = _570.z;
                                bool _1602 = _1596 < _1600;
                                if (_1602)
                                {
                                    _570.y += _568.y;
                                    _567.y += _569.y;
                                }
                                else
                                {
                                    _570.z += _568.z;
                                    _567.z += _569.z;
                                }
                                _1220 = _1602 ? 1 : 2;
                            }
                            _1216++;
                            _1219 = _1220;
                            continue;
                        }
                        else
                        {
                            _1663 = _1069;
                            _1664 = _1071;
                            _1665 = _1073;
                            _1666 = _1075;
                            _1667 = false;
                            break;
                        }
                    }
                    if (_1667)
                    {
                        _1070 = _1663;
                        _1072 = _1664;
                        _1074 = _1665;
                        _1076 = _1666;
                        break;
                    }
                    _1070 = false;
                    _1072 = _559;
                    _1074 = _558;
                    _1076 = _558;
                    break;
                } while(false);
                if (!_1070)
                {
                    _2190 = _1065 + (_1067 * float3(0.5, 0.699999988079071044921875, 1.0));
                    break;
                }
                _1064 = float3(float((blockState._m0[_1072].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1072].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1072].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _1066 = _1065 + (_1067 * (_1064 * blockState._m0[_1072].Light));
                _1068 = _1067 * _1064;
                float2 _1756 = float2(gl_GlobalInvocationID.xy);
                float _1768 = float(uint(UniformBuffer.Sample));
                float _1772 = float(uint(_1081));
                float _1774 = _1756.x;
                uint4 _1782 = as_type<uint4>(float4(_1774, _1756.y, _1768 * 1337.0, _1772));
                uint _1788 = _1782.y;
                uint _1794 = _1788 + (_1788 << 10u);
                uint _1800 = _1794 ^ (_1794 >> 6u);
                uint _1806 = _1800 + (_1800 << 3u);
                uint _1812 = _1806 ^ (_1806 >> 11u);
                uint _1824 = _1782.z;
                uint _1830 = _1824 + (_1824 << 10u);
                uint _1836 = _1830 ^ (_1830 >> 6u);
                uint _1842 = _1836 + (_1836 << 3u);
                uint _1848 = _1842 ^ (_1842 >> 11u);
                uint _1860 = _1782.w;
                uint _1866 = _1860 + (_1860 << 10u);
                uint _1872 = _1866 ^ (_1866 >> 6u);
                uint _1878 = _1872 + (_1872 << 3u);
                uint _1884 = _1878 ^ (_1878 >> 11u);
                uint _1894 = ((_1782.x ^ (_1812 + (_1812 << 15u))) ^ (_1848 + (_1848 << 15u))) ^ (_1884 + (_1884 << 15u));
                uint _1900 = _1894 + (_1894 << 10u);
                uint _1906 = _1900 ^ (_1900 >> 6u);
                uint _1912 = _1906 + (_1906 << 3u);
                uint _1918 = _1912 ^ (_1912 >> 11u);
                float _1938 = as_type<float>(((_1918 + (_1918 << 15u)) & 8388607u) | 1065353216u);
                uint4 _1952 = as_type<uint4>(float4(_1774, _1756.y, _1768, _1772 * 19.0));
                uint _1958 = _1952.y;
                uint _1964 = _1958 + (_1958 << 10u);
                uint _1970 = _1964 ^ (_1964 >> 6u);
                uint _1976 = _1970 + (_1970 << 3u);
                uint _1982 = _1976 ^ (_1976 >> 11u);
                uint _1994 = _1952.z;
                uint _2000 = _1994 + (_1994 << 10u);
                uint _2006 = _2000 ^ (_2000 >> 6u);
                uint _2012 = _2006 + (_2006 << 3u);
                uint _2018 = _2012 ^ (_2012 >> 11u);
                uint _2030 = _1952.w;
                uint _2036 = _2030 + (_2030 << 10u);
                uint _2042 = _2036 ^ (_2036 >> 6u);
                uint _2048 = _2042 + (_2042 << 3u);
                uint _2054 = _2048 ^ (_2048 >> 11u);
                uint _2064 = ((_1952.x ^ (_1982 + (_1982 << 15u))) ^ (_2018 + (_2018 << 15u))) ^ (_2054 + (_2054 << 15u));
                uint _2070 = _2064 + (_2064 << 10u);
                uint _2076 = _2070 ^ (_2070 >> 6u);
                uint _2082 = _2076 + (_2076 << 3u);
                uint _2088 = _2082 ^ (_2082 >> 11u);
                float _2120 = acos(sqrt(2.0 - _1938));
                float _2124 = 6.283185482025146484375 * (as_type<float>(((_2088 + (_2088 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                float _2128 = sin(_2120);
                float _2132 = _2128 * cos(_2124);
                float _2134 = cos(_2120);
                float _2138 = _2128 * sin(_2124);
                _1061 = float3(_2132, _2134, _2138);
                float3 _2154 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_1076.y) < 0.999000012874603271484375)), _1076));
                _1078 = fast::normalize(mix(reflect(_1077, _1076), ((_2154 * _2132) + (_1076 * _2134)) + (cross(_1076, _2154) * _2138), float3(blockState._m0[_1072].Roughness)));
                _1080 = _1074 + (_1076 * 0.001000000047497451305389404296875);
                _1060 = _1061;
                _1063 = _1064;
                _1065 = _1066;
                _1067 = _1068;
                _1069 = _1070;
                _1071 = _1072;
                _1073 = _1074;
                _1075 = _1076;
                _1077 = _1078;
                _1079 = _1080;
                _1081++;
                continue;
            }
            else
            {
                _2190 = _1065;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_2190, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

