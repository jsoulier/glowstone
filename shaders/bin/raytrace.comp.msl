#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
    float IOR;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _591 = {};
constant uint _592 = {};
constant bool _593 = {};
constant float3 _597 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _620 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _622 = _620.x;
        uint _626 = _620.y;
        bool _648;
        if (!(gl_GlobalInvocationID.x >= _622))
        {
            _648 = gl_GlobalInvocationID.y >= _626;
        }
        else
        {
            _648 = true;
        }
        if (_648)
        {
            break;
        }
        float _659 = float(UniformBuffer.Sample);
        float _665 = float(gl_GlobalInvocationID.x);
        float _667 = float(gl_GlobalInvocationID.y);
        uint4 _673 = as_type<uint4>(float4(_665, _667, _659, 0.0));
        uint _679 = _673.y;
        uint _685 = _679 + (_679 << 10u);
        uint _691 = _685 ^ (_685 >> 6u);
        uint _697 = _691 + (_691 << 3u);
        uint _703 = _697 ^ (_697 >> 11u);
        uint _715 = _673.z;
        uint _721 = _715 + (_715 << 10u);
        uint _727 = _721 ^ (_721 >> 6u);
        uint _733 = _727 + (_727 << 3u);
        uint _739 = _733 ^ (_733 >> 11u);
        uint _751 = _673.w;
        uint _757 = _751 + (_751 << 10u);
        uint _763 = _757 ^ (_757 >> 6u);
        uint _769 = _763 + (_763 << 3u);
        uint _775 = _769 ^ (_769 >> 11u);
        uint _785 = ((_673.x ^ (_703 + (_703 << 15u))) ^ (_739 + (_739 << 15u))) ^ (_775 + (_775 << 15u));
        uint _791 = _785 + (_785 << 10u);
        uint _797 = _791 ^ (_791 >> 6u);
        uint _803 = _797 + (_797 << 3u);
        uint _809 = _803 ^ (_803 >> 11u);
        uint4 _845 = as_type<uint4>(float4(_665, _667, _659, 1.0));
        uint _851 = _845.y;
        uint _857 = _851 + (_851 << 10u);
        uint _863 = _857 ^ (_857 >> 6u);
        uint _869 = _863 + (_863 << 3u);
        uint _875 = _869 ^ (_869 >> 11u);
        uint _887 = _845.z;
        uint _893 = _887 + (_887 << 10u);
        uint _899 = _893 ^ (_893 >> 6u);
        uint _905 = _899 + (_899 << 3u);
        uint _911 = _905 ^ (_905 >> 11u);
        uint _923 = _845.w;
        uint _929 = _923 + (_923 << 10u);
        uint _935 = _929 ^ (_929 >> 6u);
        uint _941 = _935 + (_935 << 3u);
        uint _947 = _941 ^ (_941 >> 11u);
        uint _957 = ((_845.x ^ (_875 + (_875 << 15u))) ^ (_911 + (_911 << 15u))) ^ (_947 + (_947 << 15u));
        uint _963 = _957 + (_957 << 10u);
        uint _969 = _963 ^ (_963 >> 6u);
        uint _975 = _969 + (_969 << 3u);
        uint _981 = _975 ^ (_975 >> 11u);
        float3 _1096;
        float3 _1099;
        float3 _1101;
        float3 _1103;
        float3 _1109;
        float3 _1111;
        float3 _1115;
        float3 _1117;
        _1096 = _597;
        _1099 = _597;
        _1101 = float3(0.0);
        _1103 = float3(1.0);
        _1109 = _591;
        _1111 = _591;
        _1115 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (as_type<float>(((_809 + (_809 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_622)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (as_type<float>(((_981 + (_981 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_626))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _1117 = float3(cameraState._m0[0u].Position);
        float3 _1100;
        float3 _1102;
        float3 _1104;
        float _1114;
        int3 _602;
        float3 _603;
        float3 _1097;
        bool _1106;
        uint _1108;
        float3 _1110;
        float3 _1112;
        float3 _1116;
        float3 _1118;
        float3 _2492;
        bool _1105;
        uint _1107;
        float _1113 = -1.0;
        int _1119 = 0;
        for (;;)
        {
            if (_1119 < 8)
            {
                float3 _604 = _1117;
                float3 _605 = _1115;
                do
                {
                    int3 _600 = int3(floor(_1117));
                    float3 _601 = abs(float3(1.0) / _1115);
                    for (int _1173 = 0; _1173 < 3; _1173++)
                    {
                        uint _1184 = uint(_1173);
                        if (_605[_1184] < 0.0)
                        {
                            _602[_1184] = -1;
                            _603[_1184] = (_604[_1184] - float(_600[_1184])) * _601[_1184];
                        }
                        else
                        {
                            _602[_1184] = 1;
                            _603[_1184] = ((float(_600[_1184]) + 1.0) - _604[_1184]) * _601[_1184];
                        }
                    }
                    int _1261;
                    bool _1756;
                    uint _1757;
                    float3 _1758;
                    float3 _1759;
                    bool _1760;
                    int _1257 = 0;
                    int _1260 = -1;
                    for (;;)
                    {
                        if (_1257 < 512)
                        {
                            int3 _1271 = _600;
                            int _1283 = _1271.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _1285 = _1271;
                            _1285.x = _1283;
                            int _1297 = _1271.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _1285.z = _1297;
                            int2 _1305 = _1285.xz / int2(32);
                            bool _1319;
                            if (!(_1283 < 0))
                            {
                                _1319 = _1297 < 0;
                            }
                            else
                            {
                                _1319 = true;
                            }
                            bool _1331;
                            if (!_1319)
                            {
                                _1331 = _1305.x >= 8;
                            }
                            else
                            {
                                _1331 = true;
                            }
                            bool _1343;
                            if (!_1331)
                            {
                                _1343 = _1305.y >= 8;
                            }
                            else
                            {
                                _1343 = true;
                            }
                            bool _1367;
                            if (!_1343)
                            {
                                bool _1365;
                                if (_602.y > 0)
                                {
                                    _1365 = _1271.y > 32;
                                }
                                else
                                {
                                    _1365 = false;
                                }
                                _1367 = _1365;
                            }
                            else
                            {
                                _1367 = true;
                            }
                            if (_1367)
                            {
                                _1756 = _1105;
                                _1757 = _1107;
                                _1758 = _1109;
                                _1759 = _1111;
                                _1760 = false;
                                break;
                            }
                            int2 _1394 = int2(chunkTexture.read(uint2(uint2(_1305)), 0u).xy);
                            int3 _1404 = _1285;
                            _1404.x = (_1283 - (_1305.x * 32)) + (_1394.x * 32);
                            _1404.z = (_1297 - (_1305.y * 32)) + (_1394.y * 32);
                            uint4 _1422 = blockTexture.read(uint3(uint3(_1404)), 0u);
                            uint _1424 = _1422.x;
                            bool _1448 = blockState._m0[_1424].IOR > 0.001000000047497451305389404296875;
                            bool _1460;
                            if (!_1448)
                            {
                                _1460 = _1424 != 0u;
                            }
                            else
                            {
                                _1460 = false;
                            }
                            bool _1480;
                            if (!_1460)
                            {
                                bool _1478;
                                if (_1448)
                                {
                                    _1478 = abs(blockState._m0[_1424].IOR - _1113) > 0.001000000047497451305389404296875;
                                }
                                else
                                {
                                    _1478 = false;
                                }
                                _1480 = _1478;
                            }
                            else
                            {
                                _1480 = true;
                            }
                            if (_1480)
                            {
                                float3 _1594;
                                float _1595;
                                if (_1260 == 0)
                                {
                                    float3 _1505 = float3(0.0);
                                    _1505.x = float(-_602.x);
                                    _1594 = _1505;
                                    _1595 = _603.x - _601.x;
                                }
                                else
                                {
                                    float3 _1589;
                                    float _1590;
                                    if (_1260 == 1)
                                    {
                                        float3 _1537 = float3(0.0);
                                        _1537.y = float(-_602.y);
                                        _1589 = _1537;
                                        _1590 = _603.y - _601.y;
                                    }
                                    else
                                    {
                                        float3 _1584;
                                        float _1585;
                                        if (_1260 == 2)
                                        {
                                            float3 _1568 = float3(0.0);
                                            _1568.z = float(-_602.z);
                                            _1584 = _1568;
                                            _1585 = _603.z - _601.z;
                                        }
                                        else
                                        {
                                            _1584 = float3(0.0);
                                            _1585 = 0.0;
                                        }
                                        _1589 = _1584;
                                        _1590 = _1585;
                                    }
                                    _1594 = _1589;
                                    _1595 = _1590;
                                }
                                _1756 = true;
                                _1757 = _1424;
                                _1758 = _1117 + (_1115 * _1595);
                                _1759 = _1594;
                                _1760 = true;
                                break;
                            }
                            if (_603.x < _603.y)
                            {
                                float _1627 = _603.x;
                                float _1631 = _603.z;
                                bool _1633 = _1627 < _1631;
                                if (_1633)
                                {
                                    _603.x += _601.x;
                                    _600.x += _602.x;
                                }
                                else
                                {
                                    _603.z += _601.z;
                                    _600.z += _602.z;
                                }
                                _1261 = _1633 ? 0 : 2;
                            }
                            else
                            {
                                float _1689 = _603.y;
                                float _1693 = _603.z;
                                bool _1695 = _1689 < _1693;
                                if (_1695)
                                {
                                    _603.y += _601.y;
                                    _600.y += _602.y;
                                }
                                else
                                {
                                    _603.z += _601.z;
                                    _600.z += _602.z;
                                }
                                _1261 = _1695 ? 1 : 2;
                            }
                            _1257++;
                            _1260 = _1261;
                            continue;
                        }
                        else
                        {
                            _1756 = _1105;
                            _1757 = _1107;
                            _1758 = _1109;
                            _1759 = _1111;
                            _1760 = false;
                            break;
                        }
                    }
                    if (_1760)
                    {
                        _1106 = _1756;
                        _1108 = _1757;
                        _1110 = _1758;
                        _1112 = _1759;
                        break;
                    }
                    _1106 = false;
                    _1108 = _592;
                    _1110 = _591;
                    _1112 = _591;
                    break;
                } while(false);
                if (!_1106)
                {
                    _2492 = _1101 + (_1103 * float3(0.5, 0.699999988079071044921875, 1.0));
                    break;
                }
                _1114 = blockState._m0[_1108].IOR;
                _1100 = float3(float((blockState._m0[_1108].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1108].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1108].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _1102 = _1101 + (_1103 * (_1100 * blockState._m0[_1108].Light));
                _1104 = _1103 * _1100;
                if (_1114 > 0.001000000047497451305389404296875)
                {
                    uint4 _1860 = as_type<uint4>(float4(_665, _667, _659 * 11.0, float(_1119)));
                    uint _1866 = _1860.y;
                    uint _1872 = _1866 + (_1866 << 10u);
                    uint _1878 = _1872 ^ (_1872 >> 6u);
                    uint _1884 = _1878 + (_1878 << 3u);
                    uint _1890 = _1884 ^ (_1884 >> 11u);
                    uint _1902 = _1860.z;
                    uint _1908 = _1902 + (_1902 << 10u);
                    uint _1914 = _1908 ^ (_1908 >> 6u);
                    uint _1920 = _1914 + (_1914 << 3u);
                    uint _1926 = _1920 ^ (_1920 >> 11u);
                    uint _1938 = _1860.w;
                    uint _1944 = _1938 + (_1938 << 10u);
                    uint _1950 = _1944 ^ (_1944 >> 6u);
                    uint _1956 = _1950 + (_1950 << 3u);
                    uint _1962 = _1956 ^ (_1956 >> 11u);
                    uint _1972 = ((_1860.x ^ (_1890 + (_1890 << 15u))) ^ (_1926 + (_1926 << 15u))) ^ (_1962 + (_1962 << 15u));
                    uint _1978 = _1972 + (_1972 << 10u);
                    uint _1984 = _1978 ^ (_1978 >> 6u);
                    uint _1990 = _1984 + (_1984 << 3u);
                    uint _1996 = _1990 ^ (_1990 >> 11u);
                    if ((as_type<float>(((_1996 + (_1996 << 15u)) & 8388607u) | 1065353216u) - 1.0) < 0.5)
                    {
                        _1097 = _1096;
                        _1116 = refract(_1115, _1112, 1.0 / (1.0 + _1114));
                        _1118 = _1110 + (_1112 * 0.001000000047497451305389404296875);
                        int _1120 = _1119 + 1;
                        _1096 = _1097;
                        _1099 = _1100;
                        _1101 = _1102;
                        _1103 = _1104;
                        _1105 = _1106;
                        _1107 = _1108;
                        _1109 = _1110;
                        _1111 = _1112;
                        _1113 = _1114;
                        _1115 = _1116;
                        _1117 = _1118;
                        _1119 = _1120;
                        continue;
                    }
                }
                float2 _2052 = float2(gl_GlobalInvocationID.xy);
                float _2064 = float(uint(UniformBuffer.Sample));
                float _2068 = float(uint(_1119));
                float _2070 = _2052.x;
                uint4 _2078 = as_type<uint4>(float4(_2070, _2052.y, _2064 * 1337.0, _2068));
                uint _2084 = _2078.y;
                uint _2090 = _2084 + (_2084 << 10u);
                uint _2096 = _2090 ^ (_2090 >> 6u);
                uint _2102 = _2096 + (_2096 << 3u);
                uint _2108 = _2102 ^ (_2102 >> 11u);
                uint _2120 = _2078.z;
                uint _2126 = _2120 + (_2120 << 10u);
                uint _2132 = _2126 ^ (_2126 >> 6u);
                uint _2138 = _2132 + (_2132 << 3u);
                uint _2144 = _2138 ^ (_2138 >> 11u);
                uint _2156 = _2078.w;
                uint _2162 = _2156 + (_2156 << 10u);
                uint _2168 = _2162 ^ (_2162 >> 6u);
                uint _2174 = _2168 + (_2168 << 3u);
                uint _2180 = _2174 ^ (_2174 >> 11u);
                uint _2190 = ((_2078.x ^ (_2108 + (_2108 << 15u))) ^ (_2144 + (_2144 << 15u))) ^ (_2180 + (_2180 << 15u));
                uint _2196 = _2190 + (_2190 << 10u);
                uint _2202 = _2196 ^ (_2196 >> 6u);
                uint _2208 = _2202 + (_2202 << 3u);
                uint _2214 = _2208 ^ (_2208 >> 11u);
                float _2234 = as_type<float>(((_2214 + (_2214 << 15u)) & 8388607u) | 1065353216u);
                uint4 _2248 = as_type<uint4>(float4(_2070, _2052.y, _2064, _2068 * 19.0));
                uint _2254 = _2248.y;
                uint _2260 = _2254 + (_2254 << 10u);
                uint _2266 = _2260 ^ (_2260 >> 6u);
                uint _2272 = _2266 + (_2266 << 3u);
                uint _2278 = _2272 ^ (_2272 >> 11u);
                uint _2290 = _2248.z;
                uint _2296 = _2290 + (_2290 << 10u);
                uint _2302 = _2296 ^ (_2296 >> 6u);
                uint _2308 = _2302 + (_2302 << 3u);
                uint _2314 = _2308 ^ (_2308 >> 11u);
                uint _2326 = _2248.w;
                uint _2332 = _2326 + (_2326 << 10u);
                uint _2338 = _2332 ^ (_2332 >> 6u);
                uint _2344 = _2338 + (_2338 << 3u);
                uint _2350 = _2344 ^ (_2344 >> 11u);
                uint _2360 = ((_2248.x ^ (_2278 + (_2278 << 15u))) ^ (_2314 + (_2314 << 15u))) ^ (_2350 + (_2350 << 15u));
                uint _2366 = _2360 + (_2360 << 10u);
                uint _2372 = _2366 ^ (_2366 >> 6u);
                uint _2378 = _2372 + (_2372 << 3u);
                uint _2384 = _2378 ^ (_2378 >> 11u);
                float _2416 = acos(sqrt(2.0 - _2234));
                float _2420 = 6.283185482025146484375 * (as_type<float>(((_2384 + (_2384 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                float _2424 = sin(_2416);
                float _2428 = _2424 * cos(_2420);
                float _2430 = cos(_2416);
                float _2434 = _2424 * sin(_2420);
                float3 _2451 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_1112.y) < 0.999000012874603271484375)), _1112));
                _1097 = float3(_2428, _2430, _2434);
                _1116 = fast::normalize(mix(reflect(_1115, _1112), ((_2451 * _2428) + (_1112 * _2430)) + (cross(_1112, _2451) * _2434), float3(blockState._m0[_1108].Roughness)));
                _1118 = _1110 + (_1112 * 0.001000000047497451305389404296875);
                int _1120 = _1119 + 1;
                _1096 = _1097;
                _1099 = _1100;
                _1101 = _1102;
                _1103 = _1104;
                _1105 = _1106;
                _1107 = _1108;
                _1109 = _1110;
                _1111 = _1112;
                _1113 = _1114;
                _1115 = _1116;
                _1117 = _1118;
                _1119 = _1120;
                continue;
            }
            else
            {
                _2492 = _1101;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_2492, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

