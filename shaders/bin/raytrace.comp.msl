#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
    float IOR;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _95 = {};
constant uint _96 = {};
constant bool _97 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _113 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _114 = _113.x;
        uint _115 = _113.y;
        bool _125;
        if (!(gl_GlobalInvocationID.x >= _114))
        {
            _125 = gl_GlobalInvocationID.y >= _115;
        }
        else
        {
            _125 = true;
        }
        if (_125)
        {
            break;
        }
        float _130 = float(UniformBuffer.Sample);
        float _133 = float(gl_GlobalInvocationID.x);
        float _134 = float(gl_GlobalInvocationID.y);
        uint4 _136 = as_type<uint4>(float4(_133, _134, _130, 0.0));
        uint _138 = _136.y;
        uint _140 = _138 + (_138 << 10u);
        uint _142 = _140 ^ (_140 >> 6u);
        uint _144 = _142 + (_142 << 3u);
        uint _146 = _144 ^ (_144 >> 11u);
        uint _150 = _136.z;
        uint _152 = _150 + (_150 << 10u);
        uint _154 = _152 ^ (_152 >> 6u);
        uint _156 = _154 + (_154 << 3u);
        uint _158 = _156 ^ (_156 >> 11u);
        uint _162 = _136.w;
        uint _164 = _162 + (_162 << 10u);
        uint _166 = _164 ^ (_164 >> 6u);
        uint _168 = _166 + (_166 << 3u);
        uint _170 = _168 ^ (_168 >> 11u);
        uint _173 = ((_136.x ^ (_146 + (_146 << 15u))) ^ (_158 + (_158 << 15u))) ^ (_170 + (_170 << 15u));
        uint _175 = _173 + (_173 << 10u);
        uint _177 = _175 ^ (_175 >> 6u);
        uint _179 = _177 + (_177 << 3u);
        uint _181 = _179 ^ (_179 >> 11u);
        uint4 _189 = as_type<uint4>(float4(_133, _134, _130, 1.0));
        uint _191 = _189.y;
        uint _193 = _191 + (_191 << 10u);
        uint _195 = _193 ^ (_193 >> 6u);
        uint _197 = _195 + (_195 << 3u);
        uint _199 = _197 ^ (_197 >> 11u);
        uint _203 = _189.z;
        uint _205 = _203 + (_203 << 10u);
        uint _207 = _205 ^ (_205 >> 6u);
        uint _209 = _207 + (_207 << 3u);
        uint _211 = _209 ^ (_209 >> 11u);
        uint _215 = _189.w;
        uint _217 = _215 + (_215 << 10u);
        uint _219 = _217 ^ (_217 >> 6u);
        uint _221 = _219 + (_219 << 3u);
        uint _223 = _221 ^ (_221 >> 11u);
        uint _226 = ((_189.x ^ (_199 + (_199 << 15u))) ^ (_211 + (_211 << 15u))) ^ (_223 + (_223 << 15u));
        uint _228 = _226 + (_226 << 10u);
        uint _230 = _228 ^ (_228 >> 6u);
        uint _232 = _230 + (_230 << 3u);
        uint _234 = _232 ^ (_232 >> 11u);
        float3 _277;
        float3 _280;
        float3 _282;
        float3 _288;
        float3 _290;
        float3 _294;
        _277 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (as_type<float>(((_181 + (_181 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_114)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (as_type<float>(((_234 + (_234 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_115))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _280 = float3(0.0);
        _282 = float3(1.0);
        _288 = _95;
        _290 = _95;
        _294 = float3(cameraState._m0[0u].Position);
        float3 _281;
        float3 _283;
        float _293;
        int3 _105;
        float3 _106;
        float3 _278;
        bool _285;
        uint _287;
        float3 _289;
        float3 _291;
        float3 _295;
        float3 _805;
        bool _284;
        uint _286;
        float _292 = 0.0;
        int _296 = 0;
        for (;;)
        {
            if (_296 < 8)
            {
                float3 _107 = _294;
                float3 _108 = _277;
                do
                {
                    int3 _103 = int3(floor(_294));
                    float3 _104 = abs(float3(1.0) / _277);
                    for (int _308 = 0; _308 < 3; _308++)
                    {
                        uint _314 = uint(_308);
                        if (_108[_314] < 0.0)
                        {
                            _105[_314] = -1;
                            _106[_314] = (_107[_314] - float(_103[_314])) * _104[_314];
                        }
                        else
                        {
                            _105[_314] = 1;
                            _106[_314] = ((float(_103[_314]) + 1.0) - _107[_314]) * _104[_314];
                        }
                    }
                    int _349;
                    bool _554;
                    uint _555;
                    float3 _556;
                    float3 _557;
                    bool _558;
                    int _345 = 0;
                    int _348 = -1;
                    for (;;)
                    {
                        if (_345 < 512)
                        {
                            int3 _353 = _103;
                            int _358 = _353.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _359 = _353;
                            _359.x = _358;
                            int _364 = _353.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _359.z = _364;
                            int2 _367 = _359.xz / int2(32);
                            bool _373;
                            if (!(_358 < 0))
                            {
                                _373 = _364 < 0;
                            }
                            else
                            {
                                _373 = true;
                            }
                            bool _379;
                            if (!_373)
                            {
                                _379 = _367.x >= 8;
                            }
                            else
                            {
                                _379 = true;
                            }
                            bool _385;
                            if (!_379)
                            {
                                _385 = _367.y >= 8;
                            }
                            else
                            {
                                _385 = true;
                            }
                            bool _397;
                            if (!_385)
                            {
                                bool _396;
                                if (_105.y > 0)
                                {
                                    _396 = _353.y > 64;
                                }
                                else
                                {
                                    _396 = false;
                                }
                                _397 = _396;
                            }
                            else
                            {
                                _397 = true;
                            }
                            if (_397)
                            {
                                _554 = _284;
                                _555 = _286;
                                _556 = _288;
                                _557 = _290;
                                _558 = false;
                                break;
                            }
                            int2 _410 = int2(chunkTexture.read(uint2(uint2(_367)), 0u).xy);
                            int3 _414 = _359;
                            _414.x = (_358 - (_367.x * 32)) + (_410.x * 32);
                            _414.z = (_364 - (_367.y * 32)) + (_410.y * 32);
                            uint4 _421 = blockTexture.read(uint3(uint3(_414)), 0u);
                            uint _422 = _421.x;
                            bool _425 = blockState._m0[_422].IOR > 0.001000000047497451305389404296875;
                            bool _430;
                            if (!_425)
                            {
                                _430 = _422 != 0u;
                            }
                            else
                            {
                                _430 = false;
                            }
                            bool _440;
                            if (!_430)
                            {
                                bool _439;
                                if (_425)
                                {
                                    _439 = abs(blockState._m0[_422].IOR - _292) > 0.001000000047497451305389404296875;
                                }
                                else
                                {
                                    _439 = false;
                                }
                                _440 = _439;
                            }
                            else
                            {
                                _440 = true;
                            }
                            if (_440)
                            {
                                float3 _490;
                                float _491;
                                if (_348 == 0)
                                {
                                    float3 _451 = float3(0.0);
                                    _451.x = float(-_105.x);
                                    _490 = _451;
                                    _491 = _106.x - _104.x;
                                }
                                else
                                {
                                    float3 _488;
                                    float _489;
                                    if (_348 == 1)
                                    {
                                        float3 _465 = float3(0.0);
                                        _465.y = float(-_105.y);
                                        _488 = _465;
                                        _489 = _106.y - _104.y;
                                    }
                                    else
                                    {
                                        float3 _486;
                                        float _487;
                                        if (_348 == 2)
                                        {
                                            float3 _479 = float3(0.0);
                                            _479.z = float(-_105.z);
                                            _486 = _479;
                                            _487 = _106.z - _104.z;
                                        }
                                        else
                                        {
                                            _486 = -_277;
                                            _487 = 0.0;
                                        }
                                        _488 = _486;
                                        _489 = _487;
                                    }
                                    _490 = _488;
                                    _491 = _489;
                                }
                                _554 = true;
                                _555 = _422;
                                _556 = _294 + (_277 * _491);
                                _557 = _490;
                                _558 = true;
                                break;
                            }
                            if (_106.x < _106.y)
                            {
                                float _502 = _106.x;
                                float _504 = _106.z;
                                bool _505 = _502 < _504;
                                if (_505)
                                {
                                    _106.x += _104.x;
                                    _103.x += _105.x;
                                }
                                else
                                {
                                    _106.z += _104.z;
                                    _103.z += _105.z;
                                }
                                _349 = _505 ? 0 : 2;
                            }
                            else
                            {
                                float _528 = _106.y;
                                float _530 = _106.z;
                                bool _531 = _528 < _530;
                                if (_531)
                                {
                                    _106.y += _104.y;
                                    _103.y += _105.y;
                                }
                                else
                                {
                                    _106.z += _104.z;
                                    _103.z += _105.z;
                                }
                                _349 = _531 ? 1 : 2;
                            }
                            _345++;
                            _348 = _349;
                            continue;
                        }
                        else
                        {
                            _554 = _284;
                            _555 = _286;
                            _556 = _288;
                            _557 = _290;
                            _558 = false;
                            break;
                        }
                    }
                    if (_558)
                    {
                        _285 = _554;
                        _287 = _555;
                        _289 = _556;
                        _291 = _557;
                        break;
                    }
                    _285 = false;
                    _287 = _96;
                    _289 = _95;
                    _291 = _95;
                    break;
                } while(false);
                if (!_285)
                {
                    _805 = _280 + (_282 * mix(float3(1.0), float3(0.5, 0.699999988079071044921875, 1.0), float3(fast::clamp((_277.y + 1.0) * 0.5, 0.0, 1.0))));
                    break;
                }
                _293 = blockState._m0[_287].IOR;
                float3 _588 = float3(float((blockState._m0[_287].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_287].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_287].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _281 = _280 + (_282 * (_588 * blockState._m0[_287].Light));
                _283 = _282 * _588;
                if (_293 > 0.001000000047497451305389404296875)
                {
                    uint4 _597 = as_type<uint4>(float4(_133, _134, _130 * 11.0, float(_296)));
                    uint _599 = _597.y;
                    uint _601 = _599 + (_599 << 10u);
                    uint _603 = _601 ^ (_601 >> 6u);
                    uint _605 = _603 + (_603 << 3u);
                    uint _607 = _605 ^ (_605 >> 11u);
                    uint _611 = _597.z;
                    uint _613 = _611 + (_611 << 10u);
                    uint _615 = _613 ^ (_613 >> 6u);
                    uint _617 = _615 + (_615 << 3u);
                    uint _619 = _617 ^ (_617 >> 11u);
                    uint _623 = _597.w;
                    uint _625 = _623 + (_623 << 10u);
                    uint _627 = _625 ^ (_625 >> 6u);
                    uint _629 = _627 + (_627 << 3u);
                    uint _631 = _629 ^ (_629 >> 11u);
                    uint _634 = ((_597.x ^ (_607 + (_607 << 15u))) ^ (_619 + (_619 << 15u))) ^ (_631 + (_631 << 15u));
                    uint _636 = _634 + (_634 << 10u);
                    uint _638 = _636 ^ (_636 >> 6u);
                    uint _640 = _638 + (_638 << 3u);
                    uint _642 = _640 ^ (_640 >> 11u);
                    if ((as_type<float>(((_642 + (_642 << 15u)) & 8388607u) | 1065353216u) - 1.0) < 0.5)
                    {
                        _278 = refract(_277, _291, (1.0 + _292) / (1.0 + _293));
                        _295 = _289 + (_291 * 0.001000000047497451305389404296875);
                        int _297 = _296 + 1;
                        _277 = _278;
                        _280 = _281;
                        _282 = _283;
                        _284 = _285;
                        _286 = _287;
                        _288 = _289;
                        _290 = _291;
                        _292 = _293;
                        _294 = _295;
                        _296 = _297;
                        continue;
                    }
                }
                float2 _660 = float2(gl_GlobalInvocationID.xy);
                float _663 = float(uint(UniformBuffer.Sample));
                float _665 = float(uint(_296));
                float _666 = _660.x;
                uint4 _669 = as_type<uint4>(float4(_666, _660.y, _663 * 1337.0, _665));
                uint _671 = _669.y;
                uint _673 = _671 + (_671 << 10u);
                uint _675 = _673 ^ (_673 >> 6u);
                uint _677 = _675 + (_675 << 3u);
                uint _679 = _677 ^ (_677 >> 11u);
                uint _683 = _669.z;
                uint _685 = _683 + (_683 << 10u);
                uint _687 = _685 ^ (_685 >> 6u);
                uint _689 = _687 + (_687 << 3u);
                uint _691 = _689 ^ (_689 >> 11u);
                uint _695 = _669.w;
                uint _697 = _695 + (_695 << 10u);
                uint _699 = _697 ^ (_697 >> 6u);
                uint _701 = _699 + (_699 << 3u);
                uint _703 = _701 ^ (_701 >> 11u);
                uint _706 = ((_669.x ^ (_679 + (_679 << 15u))) ^ (_691 + (_691 << 15u))) ^ (_703 + (_703 << 15u));
                uint _708 = _706 + (_706 << 10u);
                uint _710 = _708 ^ (_708 >> 6u);
                uint _712 = _710 + (_710 << 3u);
                uint _714 = _712 ^ (_712 >> 11u);
                uint4 _722 = as_type<uint4>(float4(_666, _660.y, _663, _665 * 19.0));
                uint _724 = _722.y;
                uint _726 = _724 + (_724 << 10u);
                uint _728 = _726 ^ (_726 >> 6u);
                uint _730 = _728 + (_728 << 3u);
                uint _732 = _730 ^ (_730 >> 11u);
                uint _736 = _722.z;
                uint _738 = _736 + (_736 << 10u);
                uint _740 = _738 ^ (_738 >> 6u);
                uint _742 = _740 + (_740 << 3u);
                uint _744 = _742 ^ (_742 >> 11u);
                uint _748 = _722.w;
                uint _750 = _748 + (_748 << 10u);
                uint _752 = _750 ^ (_750 >> 6u);
                uint _754 = _752 + (_752 << 3u);
                uint _756 = _754 ^ (_754 >> 11u);
                uint _759 = ((_722.x ^ (_732 + (_732 << 15u))) ^ (_744 + (_744 << 15u))) ^ (_756 + (_756 << 15u));
                uint _761 = _759 + (_759 << 10u);
                uint _763 = _761 ^ (_761 >> 6u);
                uint _765 = _763 + (_763 << 3u);
                uint _767 = _765 ^ (_765 >> 11u);
                float _776 = acos(sqrt(2.0 - as_type<float>(((_714 + (_714 << 15u)) & 8388607u) | 1065353216u)));
                float _777 = 6.283185482025146484375 * (as_type<float>(((_767 + (_767 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                float _778 = sin(_776);
                float3 _790 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_291.y) < 0.999000012874603271484375)), _291));
                if (blockState._m0[_287].Light > 0.001000000047497451305389404296875)
                {
                    _805 = _281;
                    break;
                }
                _278 = fast::normalize(mix(reflect(_277, _291), ((_790 * (_778 * cos(_777))) + (_291 * cos(_776))) + (cross(_291, _790) * (_778 * sin(_777))), float3(blockState._m0[_287].Roughness)));
                _295 = _289 + (_291 * 0.001000000047497451305389404296875);
                int _297 = _296 + 1;
                _277 = _278;
                _280 = _281;
                _282 = _283;
                _284 = _285;
                _286 = _287;
                _288 = _289;
                _290 = _291;
                _292 = _293;
                _294 = _295;
                _296 = _297;
                continue;
            }
            else
            {
                _805 = _280;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_805, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

