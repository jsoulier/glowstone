#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
    float4x4 ViewProj;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _516 = {};
constant uint _517 = {};
constant bool _518 = {};
constant float3 _523 = {};

kernel void main0(const device type_StructuredBuffer_CameraState& cameraState [[buffer(0)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(1)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(2)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _545 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _547 = _545.x;
        uint _551 = _545.y;
        bool _573;
        if (!(gl_GlobalInvocationID.x >= _547))
        {
            _573 = gl_GlobalInvocationID.y >= _551;
        }
        else
        {
            _573 = true;
        }
        if (_573)
        {
            break;
        }
        float3 _665;
        float3 _668;
        float3 _670;
        float3 _672;
        float3 _678;
        float3 _680;
        float3 _682;
        float3 _684;
        _665 = _523;
        _668 = _523;
        _670 = float3(0.0);
        _672 = float3(1.0);
        _678 = _516;
        _680 = _516;
        _682 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + 0.5)) / float(_547)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + 0.5)) / float(_551))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _684 = float3(cameraState._m0[0u].Position);
        float3 _666;
        float3 _669;
        float3 _671;
        float3 _673;
        float3 _683;
        float3 _685;
        int3 _528;
        float3 _529;
        bool _675;
        uint _677;
        float3 _679;
        float3 _681;
        float3 _1497;
        bool _674;
        uint _676;
        int _686 = 0;
        for (;;)
        {
            if (_686 < 3)
            {
                float3 _530 = _684;
                float3 _531 = _682;
                do
                {
                    int3 _526 = int3(floor(_684));
                    float3 _527 = abs(float3(1.0) / _682);
                    for (int _737 = 0; _737 < 3; _737++)
                    {
                        uint _748 = uint(_737);
                        if (_531[_748] < 0.0)
                        {
                            _528[_748] = -1;
                            _529[_748] = (_530[_748] - float(_526[_748])) * _527[_748];
                        }
                        else
                        {
                            _528[_748] = 1;
                            _529[_748] = ((float(_526[_748]) + 1.0) - _530[_748]) * _527[_748];
                        }
                    }
                    int _825;
                    bool _1244;
                    uint _1245;
                    float3 _1246;
                    float3 _1247;
                    bool _1248;
                    int _821 = 0;
                    int _824 = -1;
                    for (;;)
                    {
                        if (_821 < 512)
                        {
                            int3 _835 = _526;
                            int _847 = _835.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _849 = _835;
                            _849.x = _847;
                            int _861 = _835.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _849.z = _861;
                            int2 _869 = _849.xz / int2(32);
                            bool _883;
                            if (!(_847 < 0))
                            {
                                _883 = _861 < 0;
                            }
                            else
                            {
                                _883 = true;
                            }
                            bool _895;
                            if (!_883)
                            {
                                _895 = _869.x >= 8;
                            }
                            else
                            {
                                _895 = true;
                            }
                            bool _907;
                            if (!_895)
                            {
                                _907 = _869.y >= 8;
                            }
                            else
                            {
                                _907 = true;
                            }
                            if (_907)
                            {
                                _1244 = _674;
                                _1245 = _676;
                                _1246 = _678;
                                _1247 = _680;
                                _1248 = false;
                                break;
                            }
                            int2 _934 = int2(chunkTexture.read(uint2(uint2(_869)), 0u).xy);
                            int3 _944 = _849;
                            _944.x = (_847 - (_869.x * 32)) + (_934.x * 32);
                            _944.z = (_861 - (_869.y * 32)) + (_934.y * 32);
                            uint4 _962 = blockTexture.read(uint3(uint3(_944)), 0u);
                            uint _964 = _962.x;
                            if (_964 != 0u)
                            {
                                float3 _1082;
                                float _1083;
                                if (_824 == 0)
                                {
                                    float3 _993 = float3(0.0);
                                    _993.x = float(-_528.x);
                                    _1082 = _993;
                                    _1083 = _529.x - _527.x;
                                }
                                else
                                {
                                    float3 _1077;
                                    float _1078;
                                    if (_824 == 1)
                                    {
                                        float3 _1025 = float3(0.0);
                                        _1025.y = float(-_528.y);
                                        _1077 = _1025;
                                        _1078 = _529.y - _527.y;
                                    }
                                    else
                                    {
                                        float3 _1072;
                                        float _1073;
                                        if (_824 == 2)
                                        {
                                            float3 _1056 = float3(0.0);
                                            _1056.z = float(-_528.z);
                                            _1072 = _1056;
                                            _1073 = _529.z - _527.z;
                                        }
                                        else
                                        {
                                            _1072 = float3(0.0);
                                            _1073 = 0.0;
                                        }
                                        _1077 = _1072;
                                        _1078 = _1073;
                                    }
                                    _1082 = _1077;
                                    _1083 = _1078;
                                }
                                _1244 = true;
                                _1245 = _964;
                                _1246 = _684 + (_682 * _1083);
                                _1247 = _1082;
                                _1248 = true;
                                break;
                            }
                            if (_529.x < _529.y)
                            {
                                float _1115 = _529.x;
                                float _1119 = _529.z;
                                bool _1121 = _1115 < _1119;
                                if (_1121)
                                {
                                    _529.x += _527.x;
                                    _526.x += _528.x;
                                }
                                else
                                {
                                    _529.z += _527.z;
                                    _526.z += _528.z;
                                }
                                _825 = _1121 ? 0 : 2;
                            }
                            else
                            {
                                float _1177 = _529.y;
                                float _1181 = _529.z;
                                bool _1183 = _1177 < _1181;
                                if (_1183)
                                {
                                    _529.y += _527.y;
                                    _526.y += _528.y;
                                }
                                else
                                {
                                    _529.z += _527.z;
                                    _526.z += _528.z;
                                }
                                _825 = _1183 ? 1 : 2;
                            }
                            _821++;
                            _824 = _825;
                            continue;
                        }
                        else
                        {
                            _1244 = _674;
                            _1245 = _676;
                            _1246 = _678;
                            _1247 = _680;
                            _1248 = false;
                            break;
                        }
                    }
                    if (_1248)
                    {
                        _675 = _1244;
                        _677 = _1245;
                        _679 = _1246;
                        _681 = _1247;
                        break;
                    }
                    _675 = false;
                    _677 = _517;
                    _679 = _516;
                    _681 = _516;
                    break;
                } while(false);
                if (!_675)
                {
                    _1497 = _670 + (_672 * float3(0.5, 0.699999988079071044921875, 1.0));
                    break;
                }
                _669 = float3(float((blockState._m0[_677].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_677].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_677].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _671 = _670 + (_672 * (_669 * blockState._m0[_677].Light));
                _673 = _672 * _669;
                uint _1341 = (gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * _547)) + uint(_686);
                uint _1355 = (_1341 ^ (_1341 >> 16u)) * 2146121005u;
                uint _1365 = (_1355 ^ (_1355 >> 15u)) * 2221713035u;
                uint _1383 = _1341 + 1u;
                uint _1395 = (_1383 ^ (_1383 >> 16u)) * 2146121005u;
                uint _1405 = (_1395 ^ (_1395 >> 15u)) * 2221713035u;
                float _1417 = float((_1405 ^ (_1405 >> 16u)) & 16777215u);
                float _1427 = acos(sqrt(1.0 - (float((_1365 ^ (_1365 >> 16u)) & 16777215u) * 5.9604644775390625e-08)));
                float _1431 = _1417 * 3.7450703871400037314742803573608e-07;
                float _1435 = sin(_1427);
                float _1439 = _1435 * cos(_1431);
                float _1441 = cos(_1427);
                float _1445 = _1435 * sin(_1431);
                _666 = float3(_1439, _1441, _1445);
                float3 _1461 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_681.y) < 0.999000012874603271484375)), _681));
                _683 = fast::normalize(mix(reflect(_682, _681), ((_1461 * _1439) + (_681 * _1441)) + (cross(_681, _1461) * _1445), float3(blockState._m0[_677].Roughness)));
                _685 = _679 + (_681 * 0.001000000047497451305389404296875);
                _665 = _666;
                _668 = _669;
                _670 = _671;
                _672 = _673;
                _674 = _675;
                _676 = _677;
                _678 = _679;
                _680 = _681;
                _682 = _683;
                _684 = _685;
                _686++;
                continue;
            }
            else
            {
                _1497 = _670;
                break;
            }
        }
        outTexture.write(float4(_1497, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

