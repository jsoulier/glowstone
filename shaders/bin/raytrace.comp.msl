#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _563 = {};
constant uint _564 = {};
constant bool _565 = {};
constant float3 _569 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _591 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _593 = _591.x;
        uint _597 = _591.y;
        bool _619;
        if (!(gl_GlobalInvocationID.x >= _593))
        {
            _619 = gl_GlobalInvocationID.y >= _597;
        }
        else
        {
            _619 = true;
        }
        if (_619)
        {
            break;
        }
        float _630 = float(UniformBuffer.Sample);
        uint2 _636 = as_type<uint2>(float2(_630, 0.0));
        uint _642 = _636.y;
        uint _648 = _642 + (_642 << 10u);
        uint _654 = _648 ^ (_648 >> 6u);
        uint _660 = _654 + (_654 << 3u);
        uint _666 = _660 ^ (_660 >> 11u);
        uint _676 = _636.x ^ (_666 + (_666 << 15u));
        uint _682 = _676 + (_676 << 10u);
        uint _688 = _682 ^ (_682 >> 6u);
        uint _694 = _688 + (_688 << 3u);
        uint _700 = _694 ^ (_694 >> 11u);
        uint2 _740 = as_type<uint2>(float2(_630, 1.0));
        uint _746 = _740.y;
        uint _752 = _746 + (_746 << 10u);
        uint _758 = _752 ^ (_752 >> 6u);
        uint _764 = _758 + (_758 << 3u);
        uint _770 = _764 ^ (_764 >> 11u);
        uint _780 = _740.x ^ (_770 + (_770 << 15u));
        uint _786 = _780 + (_780 << 10u);
        uint _792 = _786 ^ (_786 >> 6u);
        uint _798 = _792 + (_792 << 3u);
        uint _804 = _798 ^ (_798 >> 11u);
        float3 _921;
        float3 _924;
        float3 _926;
        float3 _928;
        float3 _934;
        float3 _936;
        float3 _938;
        float3 _940;
        _921 = _569;
        _924 = _569;
        _926 = float3(0.0);
        _928 = float3(1.0);
        _934 = _563;
        _936 = _563;
        _938 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (0.25 + ((as_type<float>(((_700 + (_700 << 15u)) & 8388607u) | 1065353216u) - 1.0) * 0.25)))) / float(_593)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (0.25 + ((as_type<float>(((_804 + (_804 << 15u)) & 8388607u) | 1065353216u) - 1.0) * 0.25)))) / float(_597))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _940 = float3(cameraState._m0[0u].Position);
        float3 _922;
        float3 _925;
        float3 _927;
        float3 _929;
        float3 _939;
        float3 _941;
        int3 _574;
        float3 _575;
        bool _931;
        uint _933;
        float3 _935;
        float3 _937;
        float3 _2053;
        bool _930;
        uint _932;
        int _942 = 0;
        for (;;)
        {
            if (_942 < 16)
            {
                float3 _576 = _940;
                float3 _577 = _938;
                do
                {
                    int3 _572 = int3(floor(_940));
                    float3 _573 = abs(float3(1.0) / _938);
                    for (int _993 = 0; _993 < 3; _993++)
                    {
                        uint _1004 = uint(_993);
                        if (_577[_1004] < 0.0)
                        {
                            _574[_1004] = -1;
                            _575[_1004] = (_576[_1004] - float(_572[_1004])) * _573[_1004];
                        }
                        else
                        {
                            _574[_1004] = 1;
                            _575[_1004] = ((float(_572[_1004]) + 1.0) - _576[_1004]) * _573[_1004];
                        }
                    }
                    int _1081;
                    bool _1524;
                    uint _1525;
                    float3 _1526;
                    float3 _1527;
                    bool _1528;
                    int _1077 = 0;
                    int _1080 = -1;
                    for (;;)
                    {
                        if (_1077 < 512)
                        {
                            int3 _1091 = _572;
                            int _1103 = _1091.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _1105 = _1091;
                            _1105.x = _1103;
                            int _1117 = _1091.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _1105.z = _1117;
                            int2 _1125 = _1105.xz / int2(32);
                            bool _1139;
                            if (!(_1103 < 0))
                            {
                                _1139 = _1117 < 0;
                            }
                            else
                            {
                                _1139 = true;
                            }
                            bool _1151;
                            if (!_1139)
                            {
                                _1151 = _1125.x >= 8;
                            }
                            else
                            {
                                _1151 = true;
                            }
                            bool _1163;
                            if (!_1151)
                            {
                                _1163 = _1125.y >= 8;
                            }
                            else
                            {
                                _1163 = true;
                            }
                            bool _1187;
                            if (!_1163)
                            {
                                bool _1185;
                                if (_574.y > 0)
                                {
                                    _1185 = _1091.y > 32;
                                }
                                else
                                {
                                    _1185 = false;
                                }
                                _1187 = _1185;
                            }
                            else
                            {
                                _1187 = true;
                            }
                            if (_1187)
                            {
                                _1524 = _930;
                                _1525 = _932;
                                _1526 = _934;
                                _1527 = _936;
                                _1528 = false;
                                break;
                            }
                            int2 _1214 = int2(chunkTexture.read(uint2(uint2(_1125)), 0u).xy);
                            int3 _1224 = _1105;
                            _1224.x = (_1103 - (_1125.x * 32)) + (_1214.x * 32);
                            _1224.z = (_1117 - (_1125.y * 32)) + (_1214.y * 32);
                            uint4 _1242 = blockTexture.read(uint3(uint3(_1224)), 0u);
                            uint _1244 = _1242.x;
                            if (_1244 != 0u)
                            {
                                float3 _1362;
                                float _1363;
                                if (_1080 == 0)
                                {
                                    float3 _1273 = float3(0.0);
                                    _1273.x = float(-_574.x);
                                    _1362 = _1273;
                                    _1363 = _575.x - _573.x;
                                }
                                else
                                {
                                    float3 _1357;
                                    float _1358;
                                    if (_1080 == 1)
                                    {
                                        float3 _1305 = float3(0.0);
                                        _1305.y = float(-_574.y);
                                        _1357 = _1305;
                                        _1358 = _575.y - _573.y;
                                    }
                                    else
                                    {
                                        float3 _1352;
                                        float _1353;
                                        if (_1080 == 2)
                                        {
                                            float3 _1336 = float3(0.0);
                                            _1336.z = float(-_574.z);
                                            _1352 = _1336;
                                            _1353 = _575.z - _573.z;
                                        }
                                        else
                                        {
                                            _1352 = float3(0.0);
                                            _1353 = 0.0;
                                        }
                                        _1357 = _1352;
                                        _1358 = _1353;
                                    }
                                    _1362 = _1357;
                                    _1363 = _1358;
                                }
                                _1524 = true;
                                _1525 = _1244;
                                _1526 = _940 + (_938 * _1363);
                                _1527 = _1362;
                                _1528 = true;
                                break;
                            }
                            if (_575.x < _575.y)
                            {
                                float _1395 = _575.x;
                                float _1399 = _575.z;
                                bool _1401 = _1395 < _1399;
                                if (_1401)
                                {
                                    _575.x += _573.x;
                                    _572.x += _574.x;
                                }
                                else
                                {
                                    _575.z += _573.z;
                                    _572.z += _574.z;
                                }
                                _1081 = _1401 ? 0 : 2;
                            }
                            else
                            {
                                float _1457 = _575.y;
                                float _1461 = _575.z;
                                bool _1463 = _1457 < _1461;
                                if (_1463)
                                {
                                    _575.y += _573.y;
                                    _572.y += _574.y;
                                }
                                else
                                {
                                    _575.z += _573.z;
                                    _572.z += _574.z;
                                }
                                _1081 = _1463 ? 1 : 2;
                            }
                            _1077++;
                            _1080 = _1081;
                            continue;
                        }
                        else
                        {
                            _1524 = _930;
                            _1525 = _932;
                            _1526 = _934;
                            _1527 = _936;
                            _1528 = false;
                            break;
                        }
                    }
                    if (_1528)
                    {
                        _931 = _1524;
                        _933 = _1525;
                        _935 = _1526;
                        _937 = _1527;
                        break;
                    }
                    _931 = false;
                    _933 = _564;
                    _935 = _563;
                    _937 = _563;
                    break;
                } while(false);
                if (!_931)
                {
                    _2053 = _926 + (_928 * float3(0.5, 0.699999988079071044921875, 1.0));
                    break;
                }
                _925 = float3(float((blockState._m0[_933].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_933].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_933].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _927 = _926 + (_928 * (_925 * blockState._m0[_933].Light));
                _929 = _928 * _925;
                float _1625 = float(uint(UniformBuffer.Sample));
                float _1629 = float(uint(_942));
                uint4 _1643 = as_type<uint4>(float4(_935, (_1625 * 1337.0) + _1629));
                uint _1649 = _1643.y;
                uint _1655 = _1649 + (_1649 << 10u);
                uint _1661 = _1655 ^ (_1655 >> 6u);
                uint _1667 = _1661 + (_1661 << 3u);
                uint _1673 = _1667 ^ (_1667 >> 11u);
                uint _1685 = _1643.z;
                uint _1691 = _1685 + (_1685 << 10u);
                uint _1697 = _1691 ^ (_1691 >> 6u);
                uint _1703 = _1697 + (_1697 << 3u);
                uint _1709 = _1703 ^ (_1703 >> 11u);
                uint _1721 = _1643.w;
                uint _1727 = _1721 + (_1721 << 10u);
                uint _1733 = _1727 ^ (_1727 >> 6u);
                uint _1739 = _1733 + (_1733 << 3u);
                uint _1745 = _1739 ^ (_1739 >> 11u);
                uint _1755 = ((_1643.x ^ (_1673 + (_1673 << 15u))) ^ (_1709 + (_1709 << 15u))) ^ (_1745 + (_1745 << 15u));
                uint _1761 = _1755 + (_1755 << 10u);
                uint _1767 = _1761 ^ (_1761 >> 6u);
                uint _1773 = _1767 + (_1767 << 3u);
                uint _1779 = _1773 ^ (_1773 >> 11u);
                float _1799 = as_type<float>(((_1779 + (_1779 << 15u)) & 8388607u) | 1065353216u);
                uint4 _1815 = as_type<uint4>(float4(_935, _1625 + (_1629 * 19.0)));
                uint _1821 = _1815.y;
                uint _1827 = _1821 + (_1821 << 10u);
                uint _1833 = _1827 ^ (_1827 >> 6u);
                uint _1839 = _1833 + (_1833 << 3u);
                uint _1845 = _1839 ^ (_1839 >> 11u);
                uint _1857 = _1815.z;
                uint _1863 = _1857 + (_1857 << 10u);
                uint _1869 = _1863 ^ (_1863 >> 6u);
                uint _1875 = _1869 + (_1869 << 3u);
                uint _1881 = _1875 ^ (_1875 >> 11u);
                uint _1893 = _1815.w;
                uint _1899 = _1893 + (_1893 << 10u);
                uint _1905 = _1899 ^ (_1899 >> 6u);
                uint _1911 = _1905 + (_1905 << 3u);
                uint _1917 = _1911 ^ (_1911 >> 11u);
                uint _1927 = ((_1815.x ^ (_1845 + (_1845 << 15u))) ^ (_1881 + (_1881 << 15u))) ^ (_1917 + (_1917 << 15u));
                uint _1933 = _1927 + (_1927 << 10u);
                uint _1939 = _1933 ^ (_1933 >> 6u);
                uint _1945 = _1939 + (_1939 << 3u);
                uint _1951 = _1945 ^ (_1945 >> 11u);
                float _1983 = acos(sqrt(2.0 - _1799));
                float _1987 = 6.283185482025146484375 * (as_type<float>(((_1951 + (_1951 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                float _1991 = sin(_1983);
                float _1995 = _1991 * cos(_1987);
                float _1997 = cos(_1983);
                float _2001 = _1991 * sin(_1987);
                _922 = float3(_1995, _1997, _2001);
                float3 _2017 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_937.y) < 0.999000012874603271484375)), _937));
                _939 = fast::normalize(mix(reflect(_938, _937), ((_2017 * _1995) + (_937 * _1997)) + (cross(_937, _2017) * _2001), float3(blockState._m0[_933].Roughness)));
                _941 = _935 + (_937 * 0.001000000047497451305389404296875);
                _921 = _922;
                _924 = _925;
                _926 = _927;
                _928 = _929;
                _930 = _931;
                _932 = _933;
                _934 = _935;
                _936 = _937;
                _938 = _939;
                _940 = _941;
                _942++;
                continue;
            }
            else
            {
                _2053 = _926;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_2053, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

