#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
    float IOR;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _600 = {};
constant uint _601 = {};
constant bool _602 = {};
constant float3 _606 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _630 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _632 = _630.x;
        uint _636 = _630.y;
        bool _658;
        if (!(gl_GlobalInvocationID.x >= _632))
        {
            _658 = gl_GlobalInvocationID.y >= _636;
        }
        else
        {
            _658 = true;
        }
        if (_658)
        {
            break;
        }
        float _669 = float(UniformBuffer.Sample);
        float _675 = float(gl_GlobalInvocationID.x);
        float _677 = float(gl_GlobalInvocationID.y);
        uint4 _683 = as_type<uint4>(float4(_675, _677, _669, 0.0));
        uint _689 = _683.y;
        uint _695 = _689 + (_689 << 10u);
        uint _701 = _695 ^ (_695 >> 6u);
        uint _707 = _701 + (_701 << 3u);
        uint _713 = _707 ^ (_707 >> 11u);
        uint _725 = _683.z;
        uint _731 = _725 + (_725 << 10u);
        uint _737 = _731 ^ (_731 >> 6u);
        uint _743 = _737 + (_737 << 3u);
        uint _749 = _743 ^ (_743 >> 11u);
        uint _761 = _683.w;
        uint _767 = _761 + (_761 << 10u);
        uint _773 = _767 ^ (_767 >> 6u);
        uint _779 = _773 + (_773 << 3u);
        uint _785 = _779 ^ (_779 >> 11u);
        uint _795 = ((_683.x ^ (_713 + (_713 << 15u))) ^ (_749 + (_749 << 15u))) ^ (_785 + (_785 << 15u));
        uint _801 = _795 + (_795 << 10u);
        uint _807 = _801 ^ (_801 >> 6u);
        uint _813 = _807 + (_807 << 3u);
        uint _819 = _813 ^ (_813 >> 11u);
        uint4 _855 = as_type<uint4>(float4(_675, _677, _669, 1.0));
        uint _861 = _855.y;
        uint _867 = _861 + (_861 << 10u);
        uint _873 = _867 ^ (_867 >> 6u);
        uint _879 = _873 + (_873 << 3u);
        uint _885 = _879 ^ (_879 >> 11u);
        uint _897 = _855.z;
        uint _903 = _897 + (_897 << 10u);
        uint _909 = _903 ^ (_903 >> 6u);
        uint _915 = _909 + (_909 << 3u);
        uint _921 = _915 ^ (_915 >> 11u);
        uint _933 = _855.w;
        uint _939 = _933 + (_933 << 10u);
        uint _945 = _939 ^ (_939 >> 6u);
        uint _951 = _945 + (_945 << 3u);
        uint _957 = _951 ^ (_951 >> 11u);
        uint _967 = ((_855.x ^ (_885 + (_885 << 15u))) ^ (_921 + (_921 << 15u))) ^ (_957 + (_957 << 15u));
        uint _973 = _967 + (_967 << 10u);
        uint _979 = _973 ^ (_973 >> 6u);
        uint _985 = _979 + (_979 << 3u);
        uint _991 = _985 ^ (_985 >> 11u);
        float3 _1106;
        float3 _1109;
        float3 _1111;
        float3 _1113;
        float3 _1115;
        float3 _1121;
        float3 _1123;
        float3 _1127;
        _1106 = _606;
        _1109 = _606;
        _1111 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (as_type<float>(((_819 + (_819 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_632)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (as_type<float>(((_991 + (_991 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_636))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _1113 = float3(0.0);
        _1115 = float3(1.0);
        _1121 = _600;
        _1123 = _600;
        _1127 = float3(cameraState._m0[0u].Position);
        float3 _1110;
        float3 _1114;
        float3 _1116;
        float _1126;
        int3 _611;
        float3 _612;
        float3 _1107;
        float3 _1112;
        bool _1118;
        uint _1120;
        float3 _1122;
        float3 _1124;
        float3 _1128;
        float3 _2521;
        bool _1117;
        uint _1119;
        float _1125 = -1.0;
        int _1129 = 0;
        for (;;)
        {
            if (_1129 < 8)
            {
                float3 _613 = _1127;
                float3 _614 = _1111;
                do
                {
                    int3 _609 = int3(floor(_1127));
                    float3 _610 = abs(float3(1.0) / _1111);
                    for (int _1183 = 0; _1183 < 3; _1183++)
                    {
                        uint _1194 = uint(_1183);
                        if (_614[_1194] < 0.0)
                        {
                            _611[_1194] = -1;
                            _612[_1194] = (_613[_1194] - float(_609[_1194])) * _610[_1194];
                        }
                        else
                        {
                            _611[_1194] = 1;
                            _612[_1194] = ((float(_609[_1194]) + 1.0) - _613[_1194]) * _610[_1194];
                        }
                    }
                    int _1271;
                    bool _1766;
                    uint _1767;
                    float3 _1768;
                    float3 _1769;
                    bool _1770;
                    int _1267 = 0;
                    int _1270 = -1;
                    for (;;)
                    {
                        if (_1267 < 512)
                        {
                            int3 _1281 = _609;
                            int _1293 = _1281.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _1295 = _1281;
                            _1295.x = _1293;
                            int _1307 = _1281.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _1295.z = _1307;
                            int2 _1315 = _1295.xz / int2(32);
                            bool _1329;
                            if (!(_1293 < 0))
                            {
                                _1329 = _1307 < 0;
                            }
                            else
                            {
                                _1329 = true;
                            }
                            bool _1341;
                            if (!_1329)
                            {
                                _1341 = _1315.x >= 8;
                            }
                            else
                            {
                                _1341 = true;
                            }
                            bool _1353;
                            if (!_1341)
                            {
                                _1353 = _1315.y >= 8;
                            }
                            else
                            {
                                _1353 = true;
                            }
                            bool _1377;
                            if (!_1353)
                            {
                                bool _1375;
                                if (_611.y > 0)
                                {
                                    _1375 = _1281.y > 64;
                                }
                                else
                                {
                                    _1375 = false;
                                }
                                _1377 = _1375;
                            }
                            else
                            {
                                _1377 = true;
                            }
                            if (_1377)
                            {
                                _1766 = _1117;
                                _1767 = _1119;
                                _1768 = _1121;
                                _1769 = _1123;
                                _1770 = false;
                                break;
                            }
                            int2 _1404 = int2(chunkTexture.read(uint2(uint2(_1315)), 0u).xy);
                            int3 _1414 = _1295;
                            _1414.x = (_1293 - (_1315.x * 32)) + (_1404.x * 32);
                            _1414.z = (_1307 - (_1315.y * 32)) + (_1404.y * 32);
                            uint4 _1432 = blockTexture.read(uint3(uint3(_1414)), 0u);
                            uint _1434 = _1432.x;
                            bool _1458 = blockState._m0[_1434].IOR > 0.001000000047497451305389404296875;
                            bool _1470;
                            if (!_1458)
                            {
                                _1470 = _1434 != 0u;
                            }
                            else
                            {
                                _1470 = false;
                            }
                            bool _1490;
                            if (!_1470)
                            {
                                bool _1488;
                                if (_1458)
                                {
                                    _1488 = abs(blockState._m0[_1434].IOR - _1125) > 0.001000000047497451305389404296875;
                                }
                                else
                                {
                                    _1488 = false;
                                }
                                _1490 = _1488;
                            }
                            else
                            {
                                _1490 = true;
                            }
                            if (_1490)
                            {
                                float3 _1604;
                                float _1605;
                                if (_1270 == 0)
                                {
                                    float3 _1515 = float3(0.0);
                                    _1515.x = float(-_611.x);
                                    _1604 = _1515;
                                    _1605 = _612.x - _610.x;
                                }
                                else
                                {
                                    float3 _1599;
                                    float _1600;
                                    if (_1270 == 1)
                                    {
                                        float3 _1547 = float3(0.0);
                                        _1547.y = float(-_611.y);
                                        _1599 = _1547;
                                        _1600 = _612.y - _610.y;
                                    }
                                    else
                                    {
                                        float3 _1594;
                                        float _1595;
                                        if (_1270 == 2)
                                        {
                                            float3 _1578 = float3(0.0);
                                            _1578.z = float(-_611.z);
                                            _1594 = _1578;
                                            _1595 = _612.z - _610.z;
                                        }
                                        else
                                        {
                                            _1594 = float3(0.0);
                                            _1595 = 0.0;
                                        }
                                        _1599 = _1594;
                                        _1600 = _1595;
                                    }
                                    _1604 = _1599;
                                    _1605 = _1600;
                                }
                                _1766 = true;
                                _1767 = _1434;
                                _1768 = _1127 + (_1111 * _1605);
                                _1769 = _1604;
                                _1770 = true;
                                break;
                            }
                            if (_612.x < _612.y)
                            {
                                float _1637 = _612.x;
                                float _1641 = _612.z;
                                bool _1643 = _1637 < _1641;
                                if (_1643)
                                {
                                    _612.x += _610.x;
                                    _609.x += _611.x;
                                }
                                else
                                {
                                    _612.z += _610.z;
                                    _609.z += _611.z;
                                }
                                _1271 = _1643 ? 0 : 2;
                            }
                            else
                            {
                                float _1699 = _612.y;
                                float _1703 = _612.z;
                                bool _1705 = _1699 < _1703;
                                if (_1705)
                                {
                                    _612.y += _610.y;
                                    _609.y += _611.y;
                                }
                                else
                                {
                                    _612.z += _610.z;
                                    _609.z += _611.z;
                                }
                                _1271 = _1705 ? 1 : 2;
                            }
                            _1267++;
                            _1270 = _1271;
                            continue;
                        }
                        else
                        {
                            _1766 = _1117;
                            _1767 = _1119;
                            _1768 = _1121;
                            _1769 = _1123;
                            _1770 = false;
                            break;
                        }
                    }
                    if (_1770)
                    {
                        _1118 = _1766;
                        _1120 = _1767;
                        _1122 = _1768;
                        _1124 = _1769;
                        break;
                    }
                    _1118 = false;
                    _1120 = _601;
                    _1122 = _600;
                    _1124 = _600;
                    break;
                } while(false);
                if (!_1118)
                {
                    _2521 = _1113 + (_1115 * mix(float3(1.0), float3(0.5, 0.699999988079071044921875, 1.0), float3(fast::clamp((_1111.y + 1.0) * 0.5, 0.0, 1.0))));
                    break;
                }
                _1126 = blockState._m0[_1120].IOR;
                _1110 = float3(float((blockState._m0[_1120].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1120].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_1120].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                _1114 = _1113 + (_1115 * (_1110 * blockState._m0[_1120].Light));
                _1116 = _1115 * _1110;
                if (_1126 > 0.001000000047497451305389404296875)
                {
                    uint4 _1882 = as_type<uint4>(float4(_675, _677, _669 * 11.0, float(_1129)));
                    uint _1888 = _1882.y;
                    uint _1894 = _1888 + (_1888 << 10u);
                    uint _1900 = _1894 ^ (_1894 >> 6u);
                    uint _1906 = _1900 + (_1900 << 3u);
                    uint _1912 = _1906 ^ (_1906 >> 11u);
                    uint _1924 = _1882.z;
                    uint _1930 = _1924 + (_1924 << 10u);
                    uint _1936 = _1930 ^ (_1930 >> 6u);
                    uint _1942 = _1936 + (_1936 << 3u);
                    uint _1948 = _1942 ^ (_1942 >> 11u);
                    uint _1960 = _1882.w;
                    uint _1966 = _1960 + (_1960 << 10u);
                    uint _1972 = _1966 ^ (_1966 >> 6u);
                    uint _1978 = _1972 + (_1972 << 3u);
                    uint _1984 = _1978 ^ (_1978 >> 11u);
                    uint _1994 = ((_1882.x ^ (_1912 + (_1912 << 15u))) ^ (_1948 + (_1948 << 15u))) ^ (_1984 + (_1984 << 15u));
                    uint _2000 = _1994 + (_1994 << 10u);
                    uint _2006 = _2000 ^ (_2000 >> 6u);
                    uint _2012 = _2006 + (_2006 << 3u);
                    uint _2018 = _2012 ^ (_2012 >> 11u);
                    if ((as_type<float>(((_2018 + (_2018 << 15u)) & 8388607u) | 1065353216u) - 1.0) < 0.5)
                    {
                        _1107 = _1106;
                        _1112 = refract(_1111, _1124, 1.0 / (1.0 + _1126));
                        _1128 = _1122 + (_1124 * 0.001000000047497451305389404296875);
                        int _1130 = _1129 + 1;
                        _1106 = _1107;
                        _1109 = _1110;
                        _1111 = _1112;
                        _1113 = _1114;
                        _1115 = _1116;
                        _1117 = _1118;
                        _1119 = _1120;
                        _1121 = _1122;
                        _1123 = _1124;
                        _1125 = _1126;
                        _1127 = _1128;
                        _1129 = _1130;
                        continue;
                    }
                }
                float2 _2074 = float2(gl_GlobalInvocationID.xy);
                float _2086 = float(uint(UniformBuffer.Sample));
                float _2090 = float(uint(_1129));
                float _2092 = _2074.x;
                uint4 _2100 = as_type<uint4>(float4(_2092, _2074.y, _2086 * 1337.0, _2090));
                uint _2106 = _2100.y;
                uint _2112 = _2106 + (_2106 << 10u);
                uint _2118 = _2112 ^ (_2112 >> 6u);
                uint _2124 = _2118 + (_2118 << 3u);
                uint _2130 = _2124 ^ (_2124 >> 11u);
                uint _2142 = _2100.z;
                uint _2148 = _2142 + (_2142 << 10u);
                uint _2154 = _2148 ^ (_2148 >> 6u);
                uint _2160 = _2154 + (_2154 << 3u);
                uint _2166 = _2160 ^ (_2160 >> 11u);
                uint _2178 = _2100.w;
                uint _2184 = _2178 + (_2178 << 10u);
                uint _2190 = _2184 ^ (_2184 >> 6u);
                uint _2196 = _2190 + (_2190 << 3u);
                uint _2202 = _2196 ^ (_2196 >> 11u);
                uint _2212 = ((_2100.x ^ (_2130 + (_2130 << 15u))) ^ (_2166 + (_2166 << 15u))) ^ (_2202 + (_2202 << 15u));
                uint _2218 = _2212 + (_2212 << 10u);
                uint _2224 = _2218 ^ (_2218 >> 6u);
                uint _2230 = _2224 + (_2224 << 3u);
                uint _2236 = _2230 ^ (_2230 >> 11u);
                float _2256 = as_type<float>(((_2236 + (_2236 << 15u)) & 8388607u) | 1065353216u);
                uint4 _2270 = as_type<uint4>(float4(_2092, _2074.y, _2086, _2090 * 19.0));
                uint _2276 = _2270.y;
                uint _2282 = _2276 + (_2276 << 10u);
                uint _2288 = _2282 ^ (_2282 >> 6u);
                uint _2294 = _2288 + (_2288 << 3u);
                uint _2300 = _2294 ^ (_2294 >> 11u);
                uint _2312 = _2270.z;
                uint _2318 = _2312 + (_2312 << 10u);
                uint _2324 = _2318 ^ (_2318 >> 6u);
                uint _2330 = _2324 + (_2324 << 3u);
                uint _2336 = _2330 ^ (_2330 >> 11u);
                uint _2348 = _2270.w;
                uint _2354 = _2348 + (_2348 << 10u);
                uint _2360 = _2354 ^ (_2354 >> 6u);
                uint _2366 = _2360 + (_2360 << 3u);
                uint _2372 = _2366 ^ (_2366 >> 11u);
                uint _2382 = ((_2270.x ^ (_2300 + (_2300 << 15u))) ^ (_2336 + (_2336 << 15u))) ^ (_2372 + (_2372 << 15u));
                uint _2388 = _2382 + (_2382 << 10u);
                uint _2394 = _2388 ^ (_2388 >> 6u);
                uint _2400 = _2394 + (_2394 << 3u);
                uint _2406 = _2400 ^ (_2400 >> 11u);
                float _2438 = acos(sqrt(2.0 - _2256));
                float _2442 = 6.283185482025146484375 * (as_type<float>(((_2406 + (_2406 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                float _2446 = sin(_2438);
                float _2450 = _2446 * cos(_2442);
                float _2452 = cos(_2438);
                float _2456 = _2446 * sin(_2442);
                float3 _2473 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_1124.y) < 0.999000012874603271484375)), _1124));
                if (blockState._m0[_1120].Light > 0.001000000047497451305389404296875)
                {
                    _2521 = _1114;
                    break;
                }
                _1107 = float3(_2450, _2452, _2456);
                _1112 = fast::normalize(mix(reflect(_1111, _1124), ((_2473 * _2450) + (_1124 * _2452)) + (cross(_1124, _2473) * _2456), float3(blockState._m0[_1120].Roughness)));
                _1128 = _1122 + (_1124 * 0.001000000047497451305389404296875);
                int _1130 = _1129 + 1;
                _1106 = _1107;
                _1109 = _1110;
                _1111 = _1112;
                _1113 = _1114;
                _1115 = _1116;
                _1117 = _1118;
                _1119 = _1120;
                _1121 = _1122;
                _1123 = _1124;
                _1125 = _1126;
                _1127 = _1128;
                _1129 = _1130;
                continue;
            }
            else
            {
                _2521 = _1113;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_2521, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

