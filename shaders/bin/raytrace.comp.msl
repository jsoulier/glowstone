#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template <typename ImageT>
void spvImageFence(ImageT img) { img.fence(); }

struct type_UniformBuffer
{
    int Sample;
};

struct CameraState
{
    packed_float3 Position;
    float AspectRatio;
    packed_float3 Forward;
    float TanHalfFov;
    packed_float3 Right;
    float Padding1;
    packed_float3 Up;
    float Padding2;
};

struct type_StructuredBuffer_CameraState
{
    CameraState _m0[1];
};

struct WorldState
{
    int2 Position;
};

struct type_StructuredBuffer_WorldState
{
    WorldState _m0[1];
};

struct BlockState
{
    uint Color;
    float Light;
    float Roughness;
    float IOR;
};

struct type_StructuredBuffer_BlockState
{
    BlockState _m0[1];
};

constant float3 _96 = {};
constant uint _97 = {};
constant bool _98 = {};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_CameraState& cameraState [[buffer(1)]], const device type_StructuredBuffer_WorldState& worldState [[buffer(2)]], const device type_StructuredBuffer_BlockState& blockState [[buffer(3)]], texture3d<uint> blockTexture [[texture(0)]], texture2d<uint> chunkTexture [[texture(1)]], texture2d<float, access::read_write> outTexture [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        uint2 _114 = uint2(outTexture.get_width(), outTexture.get_height());
        uint _115 = _114.x;
        uint _116 = _114.y;
        bool _126;
        if (!(gl_GlobalInvocationID.x >= _115))
        {
            _126 = gl_GlobalInvocationID.y >= _116;
        }
        else
        {
            _126 = true;
        }
        if (_126)
        {
            break;
        }
        float _131 = float(UniformBuffer.Sample);
        float _134 = float(gl_GlobalInvocationID.x);
        float _135 = float(gl_GlobalInvocationID.y);
        uint4 _137 = as_type<uint4>(float4(_134, _135, _131, 0.0));
        uint _139 = _137.y;
        uint _141 = _139 + (_139 << 10u);
        uint _143 = _141 ^ (_141 >> 6u);
        uint _145 = _143 + (_143 << 3u);
        uint _147 = _145 ^ (_145 >> 11u);
        uint _151 = _137.z;
        uint _153 = _151 + (_151 << 10u);
        uint _155 = _153 ^ (_153 >> 6u);
        uint _157 = _155 + (_155 << 3u);
        uint _159 = _157 ^ (_157 >> 11u);
        uint _163 = _137.w;
        uint _165 = _163 + (_163 << 10u);
        uint _167 = _165 ^ (_165 >> 6u);
        uint _169 = _167 + (_167 << 3u);
        uint _171 = _169 ^ (_169 >> 11u);
        uint _174 = ((_137.x ^ (_147 + (_147 << 15u))) ^ (_159 + (_159 << 15u))) ^ (_171 + (_171 << 15u));
        uint _176 = _174 + (_174 << 10u);
        uint _178 = _176 ^ (_176 >> 6u);
        uint _180 = _178 + (_178 << 3u);
        uint _182 = _180 ^ (_180 >> 11u);
        uint4 _190 = as_type<uint4>(float4(_134, _135, _131, 1.0));
        uint _192 = _190.y;
        uint _194 = _192 + (_192 << 10u);
        uint _196 = _194 ^ (_194 >> 6u);
        uint _198 = _196 + (_196 << 3u);
        uint _200 = _198 ^ (_198 >> 11u);
        uint _204 = _190.z;
        uint _206 = _204 + (_204 << 10u);
        uint _208 = _206 ^ (_206 >> 6u);
        uint _210 = _208 + (_208 << 3u);
        uint _212 = _210 ^ (_210 >> 11u);
        uint _216 = _190.w;
        uint _218 = _216 + (_216 << 10u);
        uint _220 = _218 ^ (_218 >> 6u);
        uint _222 = _220 + (_220 << 3u);
        uint _224 = _222 ^ (_222 >> 11u);
        uint _227 = ((_190.x ^ (_200 + (_200 << 15u))) ^ (_212 + (_212 << 15u))) ^ (_224 + (_224 << 15u));
        uint _229 = _227 + (_227 << 10u);
        uint _231 = _229 ^ (_229 >> 6u);
        uint _233 = _231 + (_231 << 3u);
        uint _235 = _233 ^ (_233 >> 11u);
        float3 _278;
        float3 _281;
        float3 _283;
        float3 _289;
        float3 _291;
        float3 _295;
        _278 = fast::normalize(((float3(cameraState._m0[0u].Right) * (((((2.0 * (float(gl_GlobalInvocationID.x) + (as_type<float>(((_182 + (_182 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_115)) - 1.0) * cameraState._m0[0u].AspectRatio) * cameraState._m0[0u].TanHalfFov)) - (float3(cameraState._m0[0u].Up) * ((1.0 - ((2.0 * (float(gl_GlobalInvocationID.y) + (as_type<float>(((_235 + (_235 << 15u)) & 8388607u) | 1065353216u) - 1.0))) / float(_116))) * cameraState._m0[0u].TanHalfFov))) + float3(cameraState._m0[0u].Forward));
        _281 = float3(0.0);
        _283 = float3(1.0);
        _289 = _96;
        _291 = _96;
        _295 = float3(cameraState._m0[0u].Position);
        int3 _106;
        float3 _107;
        float3 _279;
        float3 _282;
        float3 _284;
        bool _286;
        uint _288;
        float3 _290;
        float3 _292;
        float _294;
        float3 _296;
        float3 _844;
        bool _285;
        uint _287;
        float _293 = 0.0;
        int _297 = 0;
        for (;;)
        {
            if (_297 < 8)
            {
                float3 _108 = _295;
                float3 _109 = _278;
                do
                {
                    int3 _104 = int3(floor(_295));
                    float3 _105 = abs(float3(1.0) / _278);
                    for (int _309 = 0; _309 < 3; _309++)
                    {
                        uint _315 = uint(_309);
                        if (_109[_315] < 0.0)
                        {
                            _106[_315] = -1;
                            _107[_315] = (_108[_315] - float(_104[_315])) * _105[_315];
                        }
                        else
                        {
                            _106[_315] = 1;
                            _107[_315] = ((float(_104[_315]) + 1.0) - _108[_315]) * _105[_315];
                        }
                    }
                    int _350;
                    bool _560;
                    uint _561;
                    float3 _562;
                    float3 _563;
                    bool _564;
                    int _346 = 0;
                    int _349 = -1;
                    for (;;)
                    {
                        if (_346 < 512)
                        {
                            int3 _354 = _104;
                            int _359 = _354.x - (((device int*)&worldState._m0[0u].Position)[0] * 32);
                            int3 _360 = _354;
                            _360.x = _359;
                            int _365 = _354.z - (((device int*)&worldState._m0[0u].Position)[1] * 32);
                            _360.z = _365;
                            int2 _368 = _360.xz / int2(32);
                            bool _374;
                            if (!(_359 < 0))
                            {
                                _374 = _365 < 0;
                            }
                            else
                            {
                                _374 = true;
                            }
                            bool _380;
                            if (!_374)
                            {
                                _380 = _368.x >= 8;
                            }
                            else
                            {
                                _380 = true;
                            }
                            bool _386;
                            if (!_380)
                            {
                                _386 = _368.y >= 8;
                            }
                            else
                            {
                                _386 = true;
                            }
                            bool _398;
                            if (!_386)
                            {
                                bool _397;
                                if (_106.y > 0)
                                {
                                    _397 = _354.y > 64;
                                }
                                else
                                {
                                    _397 = false;
                                }
                                _398 = _397;
                            }
                            else
                            {
                                _398 = true;
                            }
                            if (_398)
                            {
                                _560 = _285;
                                _561 = _287;
                                _562 = _289;
                                _563 = _291;
                                _564 = false;
                                break;
                            }
                            int2 _411 = int2(chunkTexture.read(uint2(uint2(_368)), 0u).xy);
                            int3 _415 = _360;
                            _415.x = (_359 - (_368.x * 32)) + (_411.x * 32);
                            _415.z = (_365 - (_368.y * 32)) + (_411.y * 32);
                            uint4 _422 = blockTexture.read(uint3(uint3(_415)), 0u);
                            uint _423 = _422.x;
                            bool _431;
                            if (!(_293 > 0.001000000047497451305389404296875))
                            {
                                _431 = blockState._m0[_423].IOR > 0.001000000047497451305389404296875;
                            }
                            else
                            {
                                _431 = true;
                            }
                            bool _436;
                            if (!_431)
                            {
                                _436 = _423 != 0u;
                            }
                            else
                            {
                                _436 = false;
                            }
                            bool _446;
                            if (!_436)
                            {
                                bool _445;
                                if (_431)
                                {
                                    _445 = abs(blockState._m0[_423].IOR - _293) > 0.001000000047497451305389404296875;
                                }
                                else
                                {
                                    _445 = false;
                                }
                                _446 = _445;
                            }
                            else
                            {
                                _446 = true;
                            }
                            if (_446)
                            {
                                float3 _496;
                                float _497;
                                if (_349 == 0)
                                {
                                    float3 _457 = float3(0.0);
                                    _457.x = float(-_106.x);
                                    _496 = _457;
                                    _497 = _107.x - _105.x;
                                }
                                else
                                {
                                    float3 _494;
                                    float _495;
                                    if (_349 == 1)
                                    {
                                        float3 _471 = float3(0.0);
                                        _471.y = float(-_106.y);
                                        _494 = _471;
                                        _495 = _107.y - _105.y;
                                    }
                                    else
                                    {
                                        float3 _492;
                                        float _493;
                                        if (_349 == 2)
                                        {
                                            float3 _485 = float3(0.0);
                                            _485.z = float(-_106.z);
                                            _492 = _485;
                                            _493 = _107.z - _105.z;
                                        }
                                        else
                                        {
                                            _492 = -_278;
                                            _493 = 0.0;
                                        }
                                        _494 = _492;
                                        _495 = _493;
                                    }
                                    _496 = _494;
                                    _497 = _495;
                                }
                                _560 = true;
                                _561 = _423;
                                _562 = _295 + (_278 * _497);
                                _563 = _496;
                                _564 = true;
                                break;
                            }
                            if (_107.x < _107.y)
                            {
                                float _508 = _107.x;
                                float _510 = _107.z;
                                bool _511 = _508 < _510;
                                if (_511)
                                {
                                    _107.x += _105.x;
                                    _104.x += _106.x;
                                }
                                else
                                {
                                    _107.z += _105.z;
                                    _104.z += _106.z;
                                }
                                _350 = _511 ? 0 : 2;
                            }
                            else
                            {
                                float _534 = _107.y;
                                float _536 = _107.z;
                                bool _537 = _534 < _536;
                                if (_537)
                                {
                                    _107.y += _105.y;
                                    _104.y += _106.y;
                                }
                                else
                                {
                                    _107.z += _105.z;
                                    _104.z += _106.z;
                                }
                                _350 = _537 ? 1 : 2;
                            }
                            _346++;
                            _349 = _350;
                            continue;
                        }
                        else
                        {
                            _560 = _285;
                            _561 = _287;
                            _562 = _289;
                            _563 = _291;
                            _564 = false;
                            break;
                        }
                    }
                    if (_564)
                    {
                        _286 = _560;
                        _288 = _561;
                        _290 = _562;
                        _292 = _563;
                        break;
                    }
                    _286 = false;
                    _288 = _97;
                    _290 = _96;
                    _292 = _96;
                    break;
                } while(false);
                if (!_286)
                {
                    _844 = _281 + (_283 * mix(float3(1.0), float3(0.5, 0.699999988079071044921875, 1.0), float3(fast::clamp((_278.y + 1.0) * 0.5, 0.0, 1.0))));
                    break;
                }
                if (_288 != 0u)
                {
                    float3 _598 = float3(float((blockState._m0[_288].Color >> 24u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_288].Color >> 16u) & 255u) * 0.0039215688593685626983642578125, float((blockState._m0[_288].Color >> 8u) & 255u) * 0.0039215688593685626983642578125);
                    _284 = _283 * _598;
                    _282 = _281 + (_283 * (_598 * blockState._m0[_288].Light));
                }
                else
                {
                    _284 = _283;
                    _282 = _281;
                }
                bool _612;
                if (!(blockState._m0[_288].IOR > 0.001000000047497451305389404296875))
                {
                    bool _611;
                    if (_293 > 0.001000000047497451305389404296875)
                    {
                        _611 = _288 == 0u;
                    }
                    else
                    {
                        _611 = false;
                    }
                    _612 = _611;
                }
                else
                {
                    _612 = true;
                }
                if (_612)
                {
                    uint4 _618 = as_type<uint4>(float4(_134, _135, _131 * 11.0, float(_297)));
                    uint _620 = _618.y;
                    uint _622 = _620 + (_620 << 10u);
                    uint _624 = _622 ^ (_622 >> 6u);
                    uint _626 = _624 + (_624 << 3u);
                    uint _628 = _626 ^ (_626 >> 11u);
                    uint _632 = _618.z;
                    uint _634 = _632 + (_632 << 10u);
                    uint _636 = _634 ^ (_634 >> 6u);
                    uint _638 = _636 + (_636 << 3u);
                    uint _640 = _638 ^ (_638 >> 11u);
                    uint _644 = _618.w;
                    uint _646 = _644 + (_644 << 10u);
                    uint _648 = _646 ^ (_646 >> 6u);
                    uint _650 = _648 + (_648 << 3u);
                    uint _652 = _650 ^ (_650 >> 11u);
                    uint _655 = ((_618.x ^ (_628 + (_628 << 15u))) ^ (_640 + (_640 << 15u))) ^ (_652 + (_652 << 15u));
                    uint _657 = _655 + (_655 << 10u);
                    uint _659 = _657 ^ (_657 >> 6u);
                    uint _661 = _659 + (_659 << 3u);
                    uint _663 = _661 ^ (_661 >> 11u);
                    float _673 = _293 + 1.0;
                    float _674 = blockState._m0[_288].IOR + 1.0;
                    float _677 = (_673 - _674) / (_673 + _674);
                    float _678 = _677 * _677;
                    if ((as_type<float>(((_663 + (_663 << 15u)) & 8388607u) | 1065353216u) - 1.0) > (_678 + ((1.0 - _678) * powr(1.0 - fast::clamp(dot(-_278, _292), 0.0, 1.0), 5.0))))
                    {
                        float3 _690 = refract(_278, _292, (1.0 + _293) / (1.0 + blockState._m0[_288].IOR));
                        if (length(_690) > 0.001000000047497451305389404296875)
                        {
                            _279 = _690;
                            _294 = blockState._m0[_288].IOR;
                            _296 = _290 + (_690 * 0.001000000047497451305389404296875);
                            int _298 = _297 + 1;
                            _278 = _279;
                            _281 = _282;
                            _283 = _284;
                            _285 = _286;
                            _287 = _288;
                            _289 = _290;
                            _291 = _292;
                            _293 = _294;
                            _295 = _296;
                            _297 = _298;
                            continue;
                        }
                    }
                }
                float2 _699 = float2(gl_GlobalInvocationID.xy);
                float _702 = float(uint(UniformBuffer.Sample));
                float _704 = float(uint(_297));
                float _705 = _699.x;
                uint4 _708 = as_type<uint4>(float4(_705, _699.y, _702 * 1337.0, _704));
                uint _710 = _708.y;
                uint _712 = _710 + (_710 << 10u);
                uint _714 = _712 ^ (_712 >> 6u);
                uint _716 = _714 + (_714 << 3u);
                uint _718 = _716 ^ (_716 >> 11u);
                uint _722 = _708.z;
                uint _724 = _722 + (_722 << 10u);
                uint _726 = _724 ^ (_724 >> 6u);
                uint _728 = _726 + (_726 << 3u);
                uint _730 = _728 ^ (_728 >> 11u);
                uint _734 = _708.w;
                uint _736 = _734 + (_734 << 10u);
                uint _738 = _736 ^ (_736 >> 6u);
                uint _740 = _738 + (_738 << 3u);
                uint _742 = _740 ^ (_740 >> 11u);
                uint _745 = ((_708.x ^ (_718 + (_718 << 15u))) ^ (_730 + (_730 << 15u))) ^ (_742 + (_742 << 15u));
                uint _747 = _745 + (_745 << 10u);
                uint _749 = _747 ^ (_747 >> 6u);
                uint _751 = _749 + (_749 << 3u);
                uint _753 = _751 ^ (_751 >> 11u);
                uint4 _761 = as_type<uint4>(float4(_705, _699.y, _702, _704 * 19.0));
                uint _763 = _761.y;
                uint _765 = _763 + (_763 << 10u);
                uint _767 = _765 ^ (_765 >> 6u);
                uint _769 = _767 + (_767 << 3u);
                uint _771 = _769 ^ (_769 >> 11u);
                uint _775 = _761.z;
                uint _777 = _775 + (_775 << 10u);
                uint _779 = _777 ^ (_777 >> 6u);
                uint _781 = _779 + (_779 << 3u);
                uint _783 = _781 ^ (_781 >> 11u);
                uint _787 = _761.w;
                uint _789 = _787 + (_787 << 10u);
                uint _791 = _789 ^ (_789 >> 6u);
                uint _793 = _791 + (_791 << 3u);
                uint _795 = _793 ^ (_793 >> 11u);
                uint _798 = ((_761.x ^ (_771 + (_771 << 15u))) ^ (_783 + (_783 << 15u))) ^ (_795 + (_795 << 15u));
                uint _800 = _798 + (_798 << 10u);
                uint _802 = _800 ^ (_800 >> 6u);
                uint _804 = _802 + (_802 << 3u);
                uint _806 = _804 ^ (_804 >> 11u);
                float _815 = acos(sqrt(2.0 - as_type<float>(((_753 + (_753 << 15u)) & 8388607u) | 1065353216u)));
                float _816 = 6.283185482025146484375 * (as_type<float>(((_806 + (_806 << 15u)) & 8388607u) | 1065353216u) - 1.0);
                float _817 = sin(_815);
                float3 _829 = fast::normalize(cross(select(float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), bool3(abs(_292.y) < 0.999000012874603271484375)), _292));
                if (blockState._m0[_288].Light > 0.001000000047497451305389404296875)
                {
                    _844 = _282;
                    break;
                }
                _279 = fast::normalize(mix(reflect(_278, _292), ((_829 * (_817 * cos(_816))) + (_292 * cos(_815))) + (cross(_292, _829) * (_817 * sin(_816))), float3(blockState._m0[_288].Roughness)));
                _294 = _293;
                _296 = _290 + (_292 * 0.001000000047497451305389404296875);
                int _298 = _297 + 1;
                _278 = _279;
                _281 = _282;
                _283 = _284;
                _285 = _286;
                _287 = _288;
                _289 = _290;
                _291 = _292;
                _293 = _294;
                _295 = _296;
                _297 = _298;
                continue;
            }
            else
            {
                _844 = _281;
                break;
            }
        }
        spvImageFence(outTexture);
        outTexture.write(outTexture.read(uint2(gl_GlobalInvocationID.xy)) + float4(_844, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

